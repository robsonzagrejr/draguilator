
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BREAK COMMA COMMENT DEFINE DIVIDE ELSE EQUAL_TO FLOAT FLOAT_CONSTANT FOR GREATER_EQUAL_THAN GREATER_THAN IDENT IF INT INT_CONSTANT LBRACES LBRACKET LESS_EQUAL_THAN LESS_THAN LPAREN MINUS MODULO NEW NOT_EQUAL_TO NULL PLUS PRINT RBRACES RBRACKET READ RETURN RPAREN SEMICOLON STRING STRING_CONSTANT TIMESprogram : make_scope statement close_scope\n              | make_scope funclist close_scope\n              | make_scope empty close_scope\n    funclist : funcdef _funclist\n    _funclist : funclist\n                | empty\n    funcdef : DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope\n    paramlist : INT IDENT _paramlist\n                | FLOAT IDENT _paramlist\n                | STRING IDENT _paramlist\n                | empty\n    _paramlist : COMMA paramlist\n                 | empty\n    statement : vardecl SEMICOLON\n                | atribstat SEMICOLON\n                | printstat SEMICOLON\n                | readstat SEMICOLON\n                | returnstat SEMICOLON\n                | ifstat\n                | forstat\n                | LBRACES statelist RBRACES \n                | check_loop_scope BREAK SEMICOLON\n                | SEMICOLON\n    vardecl : INT IDENT vardecl_line\n              | FLOAT IDENT vardecl_line\n              | STRING IDENT vardecl_line\n    vardecl_line : LBRACKET INT_CONSTANT RBRACKET vardecl_line\n                   | empty\n    atribstat : lvalue ASSIGN _atribstat\n    _atribstat : PLUS _atribstat_help\n                 | MINUS _atribstat_help\n                 | __atribstat\n                 | IDENT ___atribstat\n                 | allocexpression\n    _atribstat_help : IDENT lvalue_line term_line numexpression_line _expression\n                      | __atribstat\n    __atribstat : _node_int_constant term_line numexpression_line _expression\n                 | _node_float_constant term_line numexpression_line _expression\n                 | _node_str_constant term_line numexpression_line _expression\n                 | _node_null_constant term_line numexpression_line _expression\n                 | LPAREN numexpression RPAREN term_line numexpression_line _expression\n    ___atribstat : lvalue_line term_line numexpression_line _expression\n                  | LPAREN paramlistcall RPAREN\n    funccall : IDENT LPAREN paramlistcall RPAREN\n    paramlistcall : IDENT _paramlistcall\n\t\t\t         | empty\n    _paramlistcall : COMMA paramlistcall\n\t\t\t          | empty\n    printstat : PRINT expression\n    readstat : READ lvalue\n    returnstat : RETURN\n    ifstat : IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat\n    _ifstat : make_scope ELSE statement close_scope\n              | empty\n    forstat : FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN  statement close_scope\n    statelist : statement _statelist\n    _statelist : statelist\n                 | empty\n    allocexpression : NEW _allocexpression\n    _allocexpression : INT allocexpression_line\n                       | FLOAT allocexpression_line\n                       | STRING allocexpression_line\n    allocexpression_line : LBRACKET numexpression RBRACKET _allocexpression_line\n    _allocexpression_line : allocexpression_line\n                            | empty\n    expression : numexpression _expression\n    _expression : LESS_THAN numexpression\n                  | GREATER_THAN numexpression\n                  | LESS_EQUAL_THAN numexpression\n                  | GREATER_EQUAL_THAN numexpression\n                  | EQUAL_TO numexpression\n                  | NOT_EQUAL_TO numexpression\n                  | empty\n    numexpression : term numexpression_line\n    numexpression_line : PLUS term numexpression_line\n                         | MINUS term numexpression_line\n                         | empty\n    term : unaryexpr term_line\n    term_line : TIMES unaryexpr term_line\n                | DIVIDE unaryexpr term_line\n                | MODULO unaryexpr term_line\n                | empty\n    unaryexpr : factor\n                 | PLUS factor\n                 | MINUS factor\n    factor : _node_int_constant \n             | _node_float_constant\n             | _node_str_constant\n             | _node_null_constant\n             | lvalue\n             | LPAREN numexpression RPAREN\n    _node_int_constant : INT_CONSTANT\n    _node_float_constant : FLOAT_CONSTANT\n    _node_str_constant : STRING_CONSTANT\n    _node_null_constant : NULL\n    lvalue : IDENT lvalue_line\n    lvalue_line : LBRACKET numexpression RBRACKET lvalue_line\n                  | empty\n    make_scope :make_loop_scope :check_loop_scope :close_scope :empty :'
    
_lr_action_items = {'LBRACES':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,170,190,192,203,214,218,219,222,223,224,226,227,228,229,],[-99,14,-23,-19,-20,14,-14,-15,-16,-17,-18,14,-21,-22,190,14,203,14,-102,-103,14,-52,-54,-102,14,-55,-102,-53,]),'SEMICOLON':([0,2,6,7,8,9,10,11,12,13,14,18,24,31,32,33,34,35,37,38,42,43,45,46,47,49,50,51,52,53,56,57,58,59,60,62,63,64,65,66,70,74,75,77,79,80,81,84,85,86,87,88,89,90,93,100,101,104,105,109,110,111,117,118,119,120,121,122,123,125,126,127,128,130,134,135,136,137,138,139,140,141,142,143,144,145,147,149,150,151,152,156,157,158,159,160,161,163,164,165,166,167,168,169,177,178,179,180,184,185,186,187,188,190,191,196,197,199,200,203,209,210,211,212,213,214,218,219,222,223,224,226,227,228,229,],[-99,7,31,-23,32,33,34,35,-19,-20,7,-103,-51,-14,-15,-16,-17,-18,7,74,-103,-96,-98,-103,-103,-49,-103,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-50,-21,-22,-24,-28,-25,-26,-29,-32,-103,-34,-103,-103,-103,-103,-66,-73,-74,-77,-78,-82,-84,-85,-103,-30,-103,-36,-31,-33,-103,-103,-103,-103,-103,-59,-67,-68,-69,-70,-71,-72,-103,-103,-103,-103,-103,-91,171,-103,-97,-103,-103,-103,-103,-103,-103,-103,-60,-61,-62,-75,-76,-79,-80,-81,-27,-103,-103,-43,-37,-38,-39,-40,-103,7,202,-103,-42,-103,-103,7,-35,-41,-63,-64,-65,-102,-103,7,-52,-54,-102,7,-55,-102,-53,]),'INT':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,92,148,190,203,205,214,218,219,222,223,224,226,227,228,229,],[-99,17,-23,-19,-20,17,-14,-15,-16,-17,-18,17,-21,-22,131,173,17,17,173,-102,-103,17,-52,-54,-102,17,-55,-102,-53,]),'FLOAT':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,92,148,190,203,205,214,218,219,222,223,224,226,227,228,229,],[-99,19,-23,-19,-20,19,-14,-15,-16,-17,-18,19,-21,-22,132,174,19,19,174,-102,-103,19,-52,-54,-102,19,-55,-102,-53,]),'STRING':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,92,148,190,203,205,214,218,219,222,223,224,226,227,228,229,],[-99,20,-23,-19,-20,20,-14,-15,-16,-17,-18,20,-21,-22,133,175,20,20,175,-102,-103,20,-52,-54,-102,20,-55,-102,-53,]),'PRINT':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,22,-23,-19,-20,22,-14,-15,-16,-17,-18,22,-21,-22,22,22,-102,-103,22,-52,-54,-102,22,-55,-102,-53,]),'READ':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,23,-23,-19,-20,23,-14,-15,-16,-17,-18,23,-21,-22,23,23,-102,-103,23,-52,-54,-102,23,-55,-102,-53,]),'RETURN':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,24,-23,-19,-20,24,-14,-15,-16,-17,-18,24,-21,-22,24,24,-102,-103,24,-52,-54,-102,24,-55,-102,-53,]),'IF':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,25,-23,-19,-20,25,-14,-15,-16,-17,-18,25,-21,-22,25,25,-102,-103,25,-52,-54,-102,25,-55,-102,-53,]),'FOR':([0,2,7,12,13,14,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,26,-23,-19,-20,26,-14,-15,-16,-17,-18,26,-21,-22,26,26,-102,-103,26,-52,-54,-102,26,-55,-102,-53,]),'DEFINE':([0,2,16,220,225,],[-99,27,27,-102,-7,]),'IDENT':([0,2,7,12,13,14,17,19,20,22,23,27,31,32,33,34,35,37,44,48,54,55,61,70,74,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,114,124,162,171,173,174,175,182,190,202,203,214,218,219,222,223,224,226,227,228,229,],[-99,18,-23,-19,-20,18,42,46,47,18,18,69,-14,-15,-16,-17,-18,18,18,85,18,18,18,-21,-22,119,119,18,18,18,18,18,18,18,18,18,18,18,18,18,18,154,18,18,193,194,195,154,18,18,18,-102,-103,18,-52,-54,-102,18,-55,-102,-53,]),'BREAK':([0,2,7,12,13,14,15,31,32,33,34,35,37,70,74,190,203,214,218,219,222,223,224,226,227,228,229,],[-99,-101,-23,-19,-20,-101,38,-14,-15,-16,-17,-18,-101,-21,-22,-101,-101,-102,-103,-101,-52,-54,-102,-101,-55,-102,-53,]),'$end':([0,1,2,3,4,5,7,12,13,16,28,29,30,31,32,33,34,35,39,40,41,70,74,214,218,220,222,223,224,225,227,228,229,],[-99,0,-103,-102,-102,-102,-23,-19,-20,-103,-1,-2,-3,-14,-15,-16,-17,-18,-4,-5,-6,-21,-22,-102,-103,-102,-52,-54,-102,-7,-55,-102,-53,]),'RBRACES':([7,12,13,31,32,33,34,35,36,37,70,71,72,73,74,201,214,216,218,222,223,224,227,228,229,],[-23,-19,-20,-14,-15,-16,-17,-18,70,-103,-21,-56,-57,-58,-22,214,-102,220,-103,-52,-54,-102,-55,-102,-53,]),'LBRACKET':([18,42,46,47,85,117,119,131,132,133,149,200,],[44,76,76,76,44,44,44,162,162,162,76,162,]),'ASSIGN':([18,21,43,45,117,150,],[-103,48,-96,-98,-103,-97,]),'TIMES':([18,43,45,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,110,111,117,119,123,142,143,144,145,150,151,160,],[-103,-96,-98,106,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,106,106,106,106,-84,-85,-103,-103,106,106,106,106,-91,-97,106,106,]),'DIVIDE':([18,43,45,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,110,111,117,119,123,142,143,144,145,150,151,160,],[-103,-96,-98,107,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,107,107,107,107,-84,-85,-103,-103,107,107,107,107,-91,-97,107,107,]),'MODULO':([18,43,45,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,110,111,117,119,123,142,143,144,145,150,151,160,],[-103,-96,-98,108,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,108,108,108,108,-84,-85,-103,-103,108,108,108,108,-91,-97,108,108,]),'PLUS':([18,22,43,44,45,48,51,52,53,56,57,58,59,60,61,62,63,64,65,85,87,88,89,90,91,94,95,96,97,98,99,102,103,105,106,107,108,109,110,111,113,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,160,162,167,168,169,171,178,188,],[-103,54,-96,54,-98,82,102,-103,-83,-86,-87,-88,-89,-90,54,-92,-93,-94,-95,-103,-103,-103,-103,-103,54,54,54,54,54,54,54,54,54,-78,54,54,54,-82,-84,-85,54,-103,-103,-103,102,102,102,102,102,102,-103,-103,-103,-91,-97,-103,102,-103,54,-79,-80,-81,54,102,102,]),'MINUS':([18,22,43,44,45,48,51,52,53,56,57,58,59,60,61,62,63,64,65,85,87,88,89,90,91,94,95,96,97,98,99,102,103,105,106,107,108,109,110,111,113,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,160,162,167,168,169,171,178,188,],[-103,55,-96,55,-98,83,103,-103,-83,-86,-87,-88,-89,-90,55,-92,-93,-94,-95,-103,-103,-103,-103,-103,55,55,55,55,55,55,55,55,55,-78,55,55,55,-82,-84,-85,55,-103,-103,-103,103,103,103,103,103,103,-103,-103,-103,-91,-97,-103,103,-103,55,-79,-80,-81,55,103,103,]),'LESS_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,94,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,94,94,94,94,-103,-75,-76,-79,-80,-81,-103,94,-103,94,94,]),'GREATER_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,95,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,95,95,95,95,-103,-75,-76,-79,-80,-81,-103,95,-103,95,95,]),'LESS_EQUAL_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,96,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,96,96,96,96,-103,-75,-76,-79,-80,-81,-103,96,-103,96,96,]),'GREATER_EQUAL_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,97,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,97,97,97,97,-103,-75,-76,-79,-80,-81,-103,97,-103,97,97,]),'EQUAL_TO':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,98,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,98,98,98,98,-103,-75,-76,-79,-80,-81,-103,98,-103,98,98,]),'NOT_EQUAL_TO':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,85,87,88,89,90,101,104,105,109,110,111,117,119,123,125,126,127,128,140,141,142,143,144,145,150,151,152,156,157,158,159,160,165,166,167,168,169,178,179,188,196,199,],[-103,-96,-98,99,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-103,-103,-103,-103,-103,-74,-77,-78,-82,-84,-85,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-103,-91,-97,-103,-103,99,99,99,99,-103,-75,-76,-79,-80,-81,-103,99,-103,99,99,]),'RBRACKET':([18,43,45,51,52,53,56,57,58,59,60,62,63,64,65,78,101,104,105,109,110,111,116,117,140,141,142,143,144,145,150,165,166,167,168,169,189,],[-103,-96,-98,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,117,-74,-77,-78,-82,-84,-85,149,-103,-103,-103,-103,-103,-103,-91,-97,-75,-76,-79,-80,-81,200,]),'RPAREN':([18,43,45,50,51,52,53,56,57,58,59,60,62,63,64,65,81,84,85,86,87,88,89,90,93,100,101,104,105,109,110,111,112,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,148,150,151,152,153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,172,176,178,179,180,181,182,183,184,185,186,187,188,193,194,195,196,197,198,199,200,204,205,206,207,208,209,210,211,212,213,215,217,],[-103,-96,-98,-103,-103,-103,-83,-86,-87,-88,-89,-90,-92,-93,-94,-95,-29,-32,-103,-34,-103,-103,-103,-103,-66,-73,-74,-77,-78,-82,-84,-85,145,-103,-30,-103,-36,-31,-33,-103,-103,-103,-103,-103,-103,160,-59,-67,-68,-69,-70,-71,-72,-103,-103,-103,-103,-103,-91,170,-103,-97,-103,-103,180,-103,-46,-103,-103,-103,-103,-103,-60,-61,-62,-75,-76,-79,-80,-81,192,-11,-103,-103,-43,-45,-103,-48,-37,-38,-39,-40,-103,-103,-103,-103,-103,-42,-47,-103,-103,-8,-103,-13,-9,-10,-35,-41,-63,-64,-65,219,-12,]),'LPAREN':([22,25,26,44,48,54,55,61,67,68,69,82,83,85,91,94,95,96,97,98,99,102,103,106,107,108,113,115,162,171,],[61,-99,-100,61,91,61,61,61,113,114,-99,91,91,124,61,61,61,61,61,61,61,61,61,61,61,61,61,148,61,61,]),'INT_CONSTANT':([22,44,48,54,55,61,76,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[62,62,62,62,62,62,116,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FLOAT_CONSTANT':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'STRING_CONSTANT':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'NULL':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'NEW':([48,],[92,]),'COMMA':([154,193,194,195,],[182,205,205,205,]),'ELSE':([214,218,221,],[-102,-99,226,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'make_scope':([0,25,69,218,],[2,67,115,221,]),'statement':([2,14,37,190,203,219,226,],[3,37,37,37,37,224,228,]),'funclist':([2,16,],[4,40,]),'empty':([2,16,18,37,42,46,47,50,51,52,85,87,88,89,90,117,119,123,124,125,126,127,128,140,141,142,143,144,148,149,151,152,154,156,157,158,159,160,178,179,182,188,193,194,195,196,199,200,205,218,],[5,41,45,73,77,77,77,100,104,109,45,109,109,109,109,45,45,109,155,104,104,104,104,104,104,109,109,109,176,77,109,104,183,100,100,100,100,109,104,100,155,104,206,206,206,100,100,213,176,223,]),'vardecl':([2,14,37,190,203,219,226,],[6,6,6,6,6,6,6,]),'atribstat':([2,14,37,114,190,202,203,219,226,],[8,8,8,147,8,215,8,8,8,]),'printstat':([2,14,37,190,203,219,226,],[9,9,9,9,9,9,9,]),'readstat':([2,14,37,190,203,219,226,],[10,10,10,10,10,10,10,]),'returnstat':([2,14,37,190,203,219,226,],[11,11,11,11,11,11,11,]),'ifstat':([2,14,37,190,203,219,226,],[12,12,12,12,12,12,12,]),'forstat':([2,14,37,190,203,219,226,],[13,13,13,13,13,13,13,]),'check_loop_scope':([2,14,37,190,203,219,226,],[15,15,15,15,15,15,15,]),'funcdef':([2,16,],[16,16,]),'lvalue':([2,14,22,23,37,44,54,55,61,91,94,95,96,97,98,99,102,103,106,107,108,113,114,162,171,190,202,203,219,226,],[21,21,60,66,21,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,21,60,60,21,21,21,21,21,]),'close_scope':([3,4,5,214,220,224,228,],[28,29,30,218,225,227,229,]),'statelist':([14,37,190,203,],[36,72,201,216,]),'_funclist':([16,],[39,]),'lvalue_line':([18,85,117,119,],[43,123,150,151,]),'expression':([22,113,171,],[49,146,191,]),'numexpression':([22,44,61,91,94,95,96,97,98,99,113,162,171,],[50,78,112,129,134,135,136,137,138,139,50,189,50,]),'term':([22,44,61,91,94,95,96,97,98,99,102,103,113,162,171,],[51,51,51,51,51,51,51,51,51,51,140,141,51,51,51,]),'unaryexpr':([22,44,61,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[52,52,52,52,52,52,52,52,52,52,52,52,142,143,144,52,52,52,]),'factor':([22,44,54,55,61,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[53,53,110,111,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'_node_int_constant':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[56,56,87,56,56,56,87,87,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'_node_float_constant':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[57,57,88,57,57,57,88,88,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'_node_str_constant':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[58,58,89,58,58,58,89,89,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'_node_null_constant':([22,44,48,54,55,61,82,83,91,94,95,96,97,98,99,102,103,106,107,108,113,162,171,],[59,59,90,59,59,59,90,90,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'make_loop_scope':([26,],[68,]),'_statelist':([37,],[71,]),'vardecl_line':([42,46,47,149,],[75,79,80,177,]),'_atribstat':([48,],[81,]),'__atribstat':([48,82,83,],[84,120,120,]),'allocexpression':([48,],[86,]),'_expression':([50,156,157,158,159,179,196,199,],[93,184,185,186,187,197,209,210,]),'numexpression_line':([51,125,126,127,128,140,141,152,178,188,],[101,156,157,158,159,165,166,179,196,199,]),'term_line':([52,87,88,89,90,123,142,143,144,151,160,],[105,125,126,127,128,152,167,168,169,178,188,]),'_atribstat_help':([82,83,],[118,121,]),'___atribstat':([85,],[122,]),'_allocexpression':([92,],[130,]),'paramlistcall':([124,182,],[153,198,]),'allocexpression_line':([131,132,133,200,],[161,163,164,212,]),'paramlist':([148,205,],[172,217,]),'_paramlistcall':([154,],[181,]),'_paramlist':([193,194,195,],[204,207,208,]),'_allocexpression_line':([200,],[211,]),'_ifstat':([218,],[222,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> make_scope statement close_scope','program',3,'p_program','draguimantic.py',25),
  ('program -> make_scope funclist close_scope','program',3,'p_program','draguimantic.py',26),
  ('program -> make_scope empty close_scope','program',3,'p_program','draguimantic.py',27),
  ('funclist -> funcdef _funclist','funclist',2,'p_funclist','draguimantic.py',33),
  ('_funclist -> funclist','_funclist',1,'p__funclist','draguimantic.py',39),
  ('_funclist -> empty','_funclist',1,'p__funclist','draguimantic.py',40),
  ('funcdef -> DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope','funcdef',10,'p_funcdef','draguimantic.py',46),
  ('paramlist -> INT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',55),
  ('paramlist -> FLOAT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',56),
  ('paramlist -> STRING IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',57),
  ('paramlist -> empty','paramlist',1,'p_paramlist','draguimantic.py',58),
  ('_paramlist -> COMMA paramlist','_paramlist',2,'p__paramlist','draguimantic.py',67),
  ('_paramlist -> empty','_paramlist',1,'p__paramlist','draguimantic.py',68),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','draguimantic.py',74),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','draguimantic.py',75),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','draguimantic.py',76),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','draguimantic.py',77),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','draguimantic.py',78),
  ('statement -> ifstat','statement',1,'p_statement','draguimantic.py',79),
  ('statement -> forstat','statement',1,'p_statement','draguimantic.py',80),
  ('statement -> LBRACES statelist RBRACES','statement',3,'p_statement','draguimantic.py',81),
  ('statement -> check_loop_scope BREAK SEMICOLON','statement',3,'p_statement','draguimantic.py',82),
  ('statement -> SEMICOLON','statement',1,'p_statement','draguimantic.py',83),
  ('vardecl -> INT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',89),
  ('vardecl -> FLOAT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',90),
  ('vardecl -> STRING IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',91),
  ('vardecl_line -> LBRACKET INT_CONSTANT RBRACKET vardecl_line','vardecl_line',4,'p_vardecl_line','draguimantic.py',99),
  ('vardecl_line -> empty','vardecl_line',1,'p_vardecl_line','draguimantic.py',100),
  ('atribstat -> lvalue ASSIGN _atribstat','atribstat',3,'p_atribstat','draguimantic.py',105),
  ('_atribstat -> PLUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',112),
  ('_atribstat -> MINUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',113),
  ('_atribstat -> __atribstat','_atribstat',1,'p__atribstat','draguimantic.py',114),
  ('_atribstat -> IDENT ___atribstat','_atribstat',2,'p__atribstat','draguimantic.py',115),
  ('_atribstat -> allocexpression','_atribstat',1,'p__atribstat','draguimantic.py',116),
  ('_atribstat_help -> IDENT lvalue_line term_line numexpression_line _expression','_atribstat_help',5,'p__atribstat_help','draguimantic.py',143),
  ('_atribstat_help -> __atribstat','_atribstat_help',1,'p__atribstat_help','draguimantic.py',144),
  ('__atribstat -> _node_int_constant term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',167),
  ('__atribstat -> _node_float_constant term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',168),
  ('__atribstat -> _node_str_constant term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',169),
  ('__atribstat -> _node_null_constant term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',170),
  ('__atribstat -> LPAREN numexpression RPAREN term_line numexpression_line _expression','__atribstat',6,'p___atribstat','draguimantic.py',171),
  ('___atribstat -> lvalue_line term_line numexpression_line _expression','___atribstat',4,'p____atribstat','draguimantic.py',197),
  ('___atribstat -> LPAREN paramlistcall RPAREN','___atribstat',3,'p____atribstat','draguimantic.py',198),
  ('funccall -> IDENT LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','draguimantic.py',222),
  ('paramlistcall -> IDENT _paramlistcall','paramlistcall',2,'p_paramlistcall','draguimantic.py',228),
  ('paramlistcall -> empty','paramlistcall',1,'p_paramlistcall','draguimantic.py',229),
  ('_paramlistcall -> COMMA paramlistcall','_paramlistcall',2,'p__paramlistcall','draguimantic.py',239),
  ('_paramlistcall -> empty','_paramlistcall',1,'p__paramlistcall','draguimantic.py',240),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','draguimantic.py',246),
  ('readstat -> READ lvalue','readstat',2,'p_readstat','draguimantic.py',252),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','draguimantic.py',258),
  ('ifstat -> IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat','ifstat',10,'p_ifstat','draguimantic.py',264),
  ('_ifstat -> make_scope ELSE statement close_scope','_ifstat',4,'p__ifstat','draguimantic.py',270),
  ('_ifstat -> empty','_ifstat',1,'p__ifstat','draguimantic.py',271),
  ('forstat -> FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN statement close_scope','forstat',11,'p_forstat','draguimantic.py',277),
  ('statelist -> statement _statelist','statelist',2,'p_statelist','draguimantic.py',284),
  ('_statelist -> statelist','_statelist',1,'p__statelist','draguimantic.py',290),
  ('_statelist -> empty','_statelist',1,'p__statelist','draguimantic.py',291),
  ('allocexpression -> NEW _allocexpression','allocexpression',2,'p_allocexpression','draguimantic.py',297),
  ('_allocexpression -> INT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',303),
  ('_allocexpression -> FLOAT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',304),
  ('_allocexpression -> STRING allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',305),
  ('allocexpression_line -> LBRACKET numexpression RBRACKET _allocexpression_line','allocexpression_line',4,'p_allocexpression_line','draguimantic.py',311),
  ('_allocexpression_line -> allocexpression_line','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',317),
  ('_allocexpression_line -> empty','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',318),
  ('expression -> numexpression _expression','expression',2,'p_expression','draguimantic.py',324),
  ('_expression -> LESS_THAN numexpression','_expression',2,'p__expression','draguimantic.py',330),
  ('_expression -> GREATER_THAN numexpression','_expression',2,'p__expression','draguimantic.py',331),
  ('_expression -> LESS_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',332),
  ('_expression -> GREATER_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',333),
  ('_expression -> EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',334),
  ('_expression -> NOT_EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',335),
  ('_expression -> empty','_expression',1,'p__expression','draguimantic.py',336),
  ('numexpression -> term numexpression_line','numexpression',2,'p_numexpression','draguimantic.py',342),
  ('numexpression_line -> PLUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',354),
  ('numexpression_line -> MINUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',355),
  ('numexpression_line -> empty','numexpression_line',1,'p_numexpression_line','draguimantic.py',356),
  ('term -> unaryexpr term_line','term',2,'p_term','draguimantic.py',375),
  ('term_line -> TIMES unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',388),
  ('term_line -> DIVIDE unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',389),
  ('term_line -> MODULO unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',390),
  ('term_line -> empty','term_line',1,'p_term_line','draguimantic.py',391),
  ('unaryexpr -> factor','unaryexpr',1,'p_unaryexpr','draguimantic.py',408),
  ('unaryexpr -> PLUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',409),
  ('unaryexpr -> MINUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',410),
  ('factor -> _node_int_constant','factor',1,'p_factor','draguimantic.py',428),
  ('factor -> _node_float_constant','factor',1,'p_factor','draguimantic.py',429),
  ('factor -> _node_str_constant','factor',1,'p_factor','draguimantic.py',430),
  ('factor -> _node_null_constant','factor',1,'p_factor','draguimantic.py',431),
  ('factor -> lvalue','factor',1,'p_factor','draguimantic.py',432),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','draguimantic.py',433),
  ('_node_int_constant -> INT_CONSTANT','_node_int_constant',1,'p__node_int_constant','draguimantic.py',449),
  ('_node_float_constant -> FLOAT_CONSTANT','_node_float_constant',1,'p__node_float_constant','draguimantic.py',457),
  ('_node_str_constant -> STRING_CONSTANT','_node_str_constant',1,'p__node_str_constant','draguimantic.py',464),
  ('_node_null_constant -> NULL','_node_null_constant',1,'p_node_null_constant','draguimantic.py',471),
  ('lvalue -> IDENT lvalue_line','lvalue',2,'p_lvalue','draguimantic.py',478),
  ('lvalue_line -> LBRACKET numexpression RBRACKET lvalue_line','lvalue_line',4,'p_lvalue_line','draguimantic.py',488),
  ('lvalue_line -> empty','lvalue_line',1,'p_lvalue_line','draguimantic.py',489),
  ('make_scope -> <empty>','make_scope',0,'p_make_scope','draguimantic.py',497),
  ('make_loop_scope -> <empty>','make_loop_scope',0,'p_make_loop_scope','draguimantic.py',503),
  ('check_loop_scope -> <empty>','check_loop_scope',0,'p_check_loop_scope','draguimantic.py',509),
  ('close_scope -> <empty>','close_scope',0,'p_close_scope','draguimantic.py',515),
  ('empty -> <empty>','empty',0,'p_empty','draguimantic.py',521),
]
