
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BREAK COMMA COMMENT DEFINE DIVIDE ELSE EQUAL_TO FLOAT FLOAT_CONSTANT FOR GREATER_EQUAL_THAN GREATER_THAN IDENT IF INT INT_CONSTANT LBRACES LBRACKET LESS_EQUAL_THAN LESS_THAN LPAREN MINUS MODULO NEW NOT_EQUAL_TO NULL PLUS PRINT RBRACES RBRACKET READ RETURN RPAREN SEMICOLON STRING STRING_CONSTANT TIMESprogram : make_scope statement close_scope\n              | make_scope funclist close_scope\n              | make_scope empty close_scope\n    funclist : funcdef _funclist\n    _funclist : funclist\n                | empty\n    funcdef : DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope\n    paramlist : INT IDENT _paramlist\n                | FLOAT IDENT _paramlist\n                | STRING IDENT _paramlist\n                | empty\n    _paramlist : COMMA paramlist\n                 | empty\n    statement : vardecl SEMICOLON\n                | atribstat SEMICOLON\n                | printstat SEMICOLON\n                | readstat SEMICOLON\n                | returnstat SEMICOLON\n                | ifstat\n                | forstat\n                | LBRACES statelist RBRACES \n                | check_loop_scope BREAK SEMICOLON\n                | SEMICOLON\n    vardecl : INT IDENT vardecl_line\n              | FLOAT IDENT vardecl_line\n              | STRING IDENT vardecl_line\n    vardecl_line : LBRACKET INT_CONSTANT RBRACKET vardecl_line\n                   | empty\n    atribstat : lvalue ASSIGN _atribstat\n    _atribstat : PLUS _atribstat_help\n                 | MINUS _atribstat_help\n                 | __atribstat\n                 | IDENT ___atribstat\n                 | allocexpression\n    _atribstat_help : IDENT lvalue_line term_line numexpression_line _expression\n                      | __atribstat\n    __atribstat : INT_CONSTANT term_line numexpression_line _expression\n                 | FLOAT_CONSTANT term_line numexpression_line _expression\n                 | STRING_CONSTANT term_line numexpression_line _expression\n                 | NULL term_line numexpression_line _expression\n                 | LPAREN numexpression RPAREN term_line numexpression_line _expression\n    ___atribstat : lvalue_line term_line numexpression_line _expression\n                  | LPAREN paramlistcall RPAREN\n    funccall : IDENT LPAREN paramlistcall RPAREN\n    paramlistcall : IDENT _paramlistcall\n\t\t\t         | empty\n    _paramlistcall : COMMA paramlistcall\n\t\t\t          | empty\n    printstat : PRINT expression\n    readstat : READ lvalue\n    returnstat : RETURN\n    ifstat : IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat\n    _ifstat : make_scope ELSE statement close_scope\n              | empty\n    forstat : FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN  statement close_scope\n    statelist : statement _statelist\n    _statelist : statelist\n                 | empty\n    allocexpression : NEW _allocexpression\n    _allocexpression : INT allocexpression_line\n                       | FLOAT allocexpression_line\n                       | STRING allocexpression_line\n    allocexpression_line : LBRACKET numexpression RBRACKET _allocexpression_line\n    _allocexpression_line : allocexpression_line\n                            | empty\n    expression : numexpression _expression\n    _expression : LESS_THAN numexpression\n                  | GREATER_THAN numexpression\n                  | LESS_EQUAL_THAN numexpression\n                  | GREATER_EQUAL_THAN numexpression\n                  | EQUAL_TO numexpression\n                  | NOT_EQUAL_TO numexpression\n                  | empty\n    numexpression : term numexpression_line\n    numexpression_line : PLUS term numexpression_line\n                         | MINUS term numexpression_line\n                         | empty\n    term : unaryexpr term_line\n    term_line : TIMES unaryexpr term_line\n                | DIVIDE unaryexpr term_line\n                | MODULO unaryexpr term_line\n                | empty\n    unaryexpr : factor\n                 | PLUS factor\n                 | MINUS factor\n    factor : INT_CONSTANT\n             | FLOAT_CONSTANT\n             | STRING_CONSTANT\n             | NULL\n             | lvalue\n             | LPAREN numexpression RPAREN\n    lvalue : IDENT lvalue_line\n    lvalue_line : LBRACKET numexpression RBRACKET lvalue_line\n                  | empty\n    make_scope :make_loop_scope :check_loop_scope :close_scope :empty :'
    
_lr_action_items = {'LBRACES':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,166,186,188,199,210,214,215,218,219,220,222,223,224,225,],[-95,14,-23,-19,-20,14,-14,-15,-16,-17,-18,14,-21,-22,186,14,199,14,-98,-99,14,-52,-54,-98,14,-55,-98,-53,]),'SEMICOLON':([0,2,6,7,8,9,10,11,12,13,14,18,24,31,32,33,34,35,37,38,42,43,45,46,47,49,50,51,52,53,56,57,58,59,60,62,66,70,71,73,75,76,77,80,81,82,83,84,85,86,89,96,97,100,101,105,106,107,113,114,115,116,117,118,119,121,122,123,124,126,130,131,132,133,134,135,136,137,138,139,140,141,143,145,146,147,148,152,153,154,155,156,157,159,160,161,162,163,164,165,173,174,175,176,180,181,182,183,184,186,187,192,193,195,196,199,205,206,207,208,209,210,214,215,218,219,220,222,223,224,225,],[-95,7,31,-23,32,33,34,35,-19,-20,7,-99,-51,-14,-15,-16,-17,-18,7,70,-99,-92,-94,-99,-99,-49,-99,-99,-99,-83,-86,-87,-88,-89,-90,-50,-21,-22,-24,-28,-25,-26,-29,-32,-99,-34,-99,-99,-99,-99,-66,-73,-74,-77,-78,-82,-84,-85,-99,-30,-99,-36,-31,-33,-99,-99,-99,-99,-99,-59,-67,-68,-69,-70,-71,-72,-99,-99,-99,-99,-99,-91,167,-99,-93,-99,-99,-99,-99,-99,-99,-99,-60,-61,-62,-75,-76,-79,-80,-81,-27,-99,-99,-43,-37,-38,-39,-40,-99,7,198,-99,-42,-99,-99,7,-35,-41,-63,-64,-65,-98,-99,7,-52,-54,-98,7,-55,-98,-53,]),'INT':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,88,144,186,199,201,210,214,215,218,219,220,222,223,224,225,],[-95,17,-23,-19,-20,17,-14,-15,-16,-17,-18,17,-21,-22,127,169,17,17,169,-98,-99,17,-52,-54,-98,17,-55,-98,-53,]),'FLOAT':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,88,144,186,199,201,210,214,215,218,219,220,222,223,224,225,],[-95,19,-23,-19,-20,19,-14,-15,-16,-17,-18,19,-21,-22,128,170,19,19,170,-98,-99,19,-52,-54,-98,19,-55,-98,-53,]),'STRING':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,88,144,186,199,201,210,214,215,218,219,220,222,223,224,225,],[-95,20,-23,-19,-20,20,-14,-15,-16,-17,-18,20,-21,-22,129,171,20,20,171,-98,-99,20,-52,-54,-98,20,-55,-98,-53,]),'PRINT':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,22,-23,-19,-20,22,-14,-15,-16,-17,-18,22,-21,-22,22,22,-98,-99,22,-52,-54,-98,22,-55,-98,-53,]),'READ':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,23,-23,-19,-20,23,-14,-15,-16,-17,-18,23,-21,-22,23,23,-98,-99,23,-52,-54,-98,23,-55,-98,-53,]),'RETURN':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,24,-23,-19,-20,24,-14,-15,-16,-17,-18,24,-21,-22,24,24,-98,-99,24,-52,-54,-98,24,-55,-98,-53,]),'IF':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,25,-23,-19,-20,25,-14,-15,-16,-17,-18,25,-21,-22,25,25,-98,-99,25,-52,-54,-98,25,-55,-98,-53,]),'FOR':([0,2,7,12,13,14,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,26,-23,-19,-20,26,-14,-15,-16,-17,-18,26,-21,-22,26,26,-98,-99,26,-52,-54,-98,26,-55,-98,-53,]),'DEFINE':([0,2,16,216,221,],[-95,27,27,-98,-7,]),'IDENT':([0,2,7,12,13,14,17,19,20,22,23,27,31,32,33,34,35,37,44,48,54,55,61,66,70,78,79,87,90,91,92,93,94,95,98,99,102,103,104,109,110,120,158,167,169,170,171,178,186,198,199,210,214,215,218,219,220,222,223,224,225,],[-95,18,-23,-19,-20,18,42,46,47,18,18,65,-14,-15,-16,-17,-18,18,18,81,18,18,18,-21,-22,115,115,18,18,18,18,18,18,18,18,18,18,18,18,18,18,150,18,18,189,190,191,150,18,18,18,-98,-99,18,-52,-54,-98,18,-55,-98,-53,]),'BREAK':([0,2,7,12,13,14,15,31,32,33,34,35,37,66,70,186,199,210,214,215,218,219,220,222,223,224,225,],[-95,-97,-23,-19,-20,-97,38,-14,-15,-16,-17,-18,-97,-21,-22,-97,-97,-98,-99,-97,-52,-54,-98,-97,-55,-98,-53,]),'$end':([0,1,2,3,4,5,7,12,13,16,28,29,30,31,32,33,34,35,39,40,41,66,70,210,214,216,218,219,220,221,223,224,225,],[-95,0,-99,-98,-98,-98,-23,-19,-20,-99,-1,-2,-3,-14,-15,-16,-17,-18,-4,-5,-6,-21,-22,-98,-99,-98,-52,-54,-98,-7,-55,-98,-53,]),'RBRACES':([7,12,13,31,32,33,34,35,36,37,66,67,68,69,70,197,210,212,214,218,219,220,223,224,225,],[-23,-19,-20,-14,-15,-16,-17,-18,66,-99,-21,-56,-57,-58,-22,210,-98,216,-99,-52,-54,-98,-55,-98,-53,]),'LBRACKET':([18,42,46,47,81,113,115,127,128,129,145,196,],[44,72,72,72,44,44,44,158,158,158,72,158,]),'ASSIGN':([18,21,43,45,113,146,],[-99,48,-92,-94,-99,-93,]),'TIMES':([18,43,45,52,53,56,57,58,59,60,81,83,84,85,86,106,107,113,115,119,138,139,140,141,146,147,156,],[-99,-92,-94,102,-83,-86,-87,-88,-89,-90,-99,102,102,102,102,-84,-85,-99,-99,102,102,102,102,-91,-93,102,102,]),'DIVIDE':([18,43,45,52,53,56,57,58,59,60,81,83,84,85,86,106,107,113,115,119,138,139,140,141,146,147,156,],[-99,-92,-94,103,-83,-86,-87,-88,-89,-90,-99,103,103,103,103,-84,-85,-99,-99,103,103,103,103,-91,-93,103,103,]),'MODULO':([18,43,45,52,53,56,57,58,59,60,81,83,84,85,86,106,107,113,115,119,138,139,140,141,146,147,156,],[-99,-92,-94,104,-83,-86,-87,-88,-89,-90,-99,104,104,104,104,-84,-85,-99,-99,104,104,104,104,-91,-93,104,104,]),'PLUS':([18,22,43,44,45,48,51,52,53,56,57,58,59,60,61,81,83,84,85,86,87,90,91,92,93,94,95,98,99,101,102,103,104,105,106,107,109,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,156,158,163,164,165,167,174,184,],[-99,54,-92,54,-94,78,98,-99,-83,-86,-87,-88,-89,-90,54,-99,-99,-99,-99,-99,54,54,54,54,54,54,54,54,54,-78,54,54,54,-82,-84,-85,54,-99,-99,-99,98,98,98,98,98,98,-99,-99,-99,-91,-93,-99,98,-99,54,-79,-80,-81,54,98,98,]),'MINUS':([18,22,43,44,45,48,51,52,53,56,57,58,59,60,61,81,83,84,85,86,87,90,91,92,93,94,95,98,99,101,102,103,104,105,106,107,109,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,156,158,163,164,165,167,174,184,],[-99,55,-92,55,-94,79,99,-99,-83,-86,-87,-88,-89,-90,55,-99,-99,-99,-99,-99,55,55,55,55,55,55,55,55,55,-78,55,55,55,-82,-84,-85,55,-99,-99,-99,99,99,99,99,99,99,-99,-99,-99,-91,-93,-99,99,-99,55,-79,-80,-81,55,99,99,]),'LESS_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,90,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,90,90,90,90,-99,-75,-76,-79,-80,-81,-99,90,-99,90,90,]),'GREATER_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,91,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,91,91,91,91,-99,-75,-76,-79,-80,-81,-99,91,-99,91,91,]),'LESS_EQUAL_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,92,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,92,92,92,92,-99,-75,-76,-79,-80,-81,-99,92,-99,92,92,]),'GREATER_EQUAL_THAN':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,93,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,93,93,93,93,-99,-75,-76,-79,-80,-81,-99,93,-99,93,93,]),'EQUAL_TO':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,94,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,94,94,94,94,-99,-75,-76,-79,-80,-81,-99,94,-99,94,94,]),'NOT_EQUAL_TO':([18,43,45,50,51,52,53,56,57,58,59,60,81,83,84,85,86,97,100,101,105,106,107,113,115,119,121,122,123,124,136,137,138,139,140,141,146,147,148,152,153,154,155,156,161,162,163,164,165,174,175,184,192,195,],[-99,-92,-94,95,-99,-99,-83,-86,-87,-88,-89,-90,-99,-99,-99,-99,-99,-74,-77,-78,-82,-84,-85,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-91,-93,-99,-99,95,95,95,95,-99,-75,-76,-79,-80,-81,-99,95,-99,95,95,]),'RBRACKET':([18,43,45,51,52,53,56,57,58,59,60,74,97,100,101,105,106,107,112,113,136,137,138,139,140,141,146,161,162,163,164,165,185,],[-99,-92,-94,-99,-99,-83,-86,-87,-88,-89,-90,113,-74,-77,-78,-82,-84,-85,145,-99,-99,-99,-99,-99,-99,-91,-93,-75,-76,-79,-80,-81,196,]),'RPAREN':([18,43,45,50,51,52,53,56,57,58,59,60,77,80,81,82,83,84,85,86,89,96,97,100,101,105,106,107,108,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,131,132,133,134,135,136,137,138,139,140,141,142,144,146,147,148,149,150,151,152,153,154,155,156,157,159,160,161,162,163,164,165,168,172,174,175,176,177,178,179,180,181,182,183,184,189,190,191,192,193,194,195,196,200,201,202,203,204,205,206,207,208,209,211,213,],[-99,-92,-94,-99,-99,-99,-83,-86,-87,-88,-89,-90,-29,-32,-99,-34,-99,-99,-99,-99,-66,-73,-74,-77,-78,-82,-84,-85,141,-99,-30,-99,-36,-31,-33,-99,-99,-99,-99,-99,-99,156,-59,-67,-68,-69,-70,-71,-72,-99,-99,-99,-99,-99,-91,166,-99,-93,-99,-99,176,-99,-46,-99,-99,-99,-99,-99,-60,-61,-62,-75,-76,-79,-80,-81,188,-11,-99,-99,-43,-45,-99,-48,-37,-38,-39,-40,-99,-99,-99,-99,-99,-42,-47,-99,-99,-8,-99,-13,-9,-10,-35,-41,-63,-64,-65,215,-12,]),'INT_CONSTANT':([22,44,48,54,55,61,72,78,79,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[56,56,83,56,56,56,112,83,83,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FLOAT_CONSTANT':([22,44,48,54,55,61,78,79,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[57,57,84,57,57,57,84,84,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'STRING_CONSTANT':([22,44,48,54,55,61,78,79,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[58,58,85,58,58,58,85,85,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'NULL':([22,44,48,54,55,61,78,79,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[59,59,86,59,59,59,86,86,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'LPAREN':([22,25,26,44,48,54,55,61,63,64,65,78,79,81,87,90,91,92,93,94,95,98,99,102,103,104,109,111,158,167,],[61,-95,-96,61,87,61,61,61,109,110,-95,87,87,120,61,61,61,61,61,61,61,61,61,61,61,61,61,144,61,61,]),'NEW':([48,],[88,]),'COMMA':([150,189,190,191,],[178,201,201,201,]),'ELSE':([210,214,217,],[-98,-95,222,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'make_scope':([0,25,65,214,],[2,63,111,217,]),'statement':([2,14,37,186,199,215,222,],[3,37,37,37,37,220,224,]),'funclist':([2,16,],[4,40,]),'empty':([2,16,18,37,42,46,47,50,51,52,81,83,84,85,86,113,115,119,120,121,122,123,124,136,137,138,139,140,144,145,147,148,150,152,153,154,155,156,174,175,178,184,189,190,191,192,195,196,201,214,],[5,41,45,69,73,73,73,96,100,105,45,105,105,105,105,45,45,105,151,100,100,100,100,100,100,105,105,105,172,73,105,100,179,96,96,96,96,105,100,96,151,100,202,202,202,96,96,209,172,219,]),'vardecl':([2,14,37,186,199,215,222,],[6,6,6,6,6,6,6,]),'atribstat':([2,14,37,110,186,198,199,215,222,],[8,8,8,143,8,211,8,8,8,]),'printstat':([2,14,37,186,199,215,222,],[9,9,9,9,9,9,9,]),'readstat':([2,14,37,186,199,215,222,],[10,10,10,10,10,10,10,]),'returnstat':([2,14,37,186,199,215,222,],[11,11,11,11,11,11,11,]),'ifstat':([2,14,37,186,199,215,222,],[12,12,12,12,12,12,12,]),'forstat':([2,14,37,186,199,215,222,],[13,13,13,13,13,13,13,]),'check_loop_scope':([2,14,37,186,199,215,222,],[15,15,15,15,15,15,15,]),'funcdef':([2,16,],[16,16,]),'lvalue':([2,14,22,23,37,44,54,55,61,87,90,91,92,93,94,95,98,99,102,103,104,109,110,158,167,186,198,199,215,222,],[21,21,60,62,21,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,21,60,60,21,21,21,21,21,]),'close_scope':([3,4,5,210,216,220,224,],[28,29,30,214,221,223,225,]),'statelist':([14,37,186,199,],[36,68,197,212,]),'_funclist':([16,],[39,]),'lvalue_line':([18,81,113,115,],[43,119,146,147,]),'expression':([22,109,167,],[49,142,187,]),'numexpression':([22,44,61,87,90,91,92,93,94,95,109,158,167,],[50,74,108,125,130,131,132,133,134,135,50,185,50,]),'term':([22,44,61,87,90,91,92,93,94,95,98,99,109,158,167,],[51,51,51,51,51,51,51,51,51,51,136,137,51,51,51,]),'unaryexpr':([22,44,61,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[52,52,52,52,52,52,52,52,52,52,52,52,138,139,140,52,52,52,]),'factor':([22,44,54,55,61,87,90,91,92,93,94,95,98,99,102,103,104,109,158,167,],[53,53,106,107,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'make_loop_scope':([26,],[64,]),'_statelist':([37,],[67,]),'vardecl_line':([42,46,47,145,],[71,75,76,173,]),'_atribstat':([48,],[77,]),'__atribstat':([48,78,79,],[80,116,116,]),'allocexpression':([48,],[82,]),'_expression':([50,152,153,154,155,175,192,195,],[89,180,181,182,183,193,205,206,]),'numexpression_line':([51,121,122,123,124,136,137,148,174,184,],[97,152,153,154,155,161,162,175,192,195,]),'term_line':([52,83,84,85,86,119,138,139,140,147,156,],[101,121,122,123,124,148,163,164,165,174,184,]),'_atribstat_help':([78,79,],[114,117,]),'___atribstat':([81,],[118,]),'_allocexpression':([88,],[126,]),'paramlistcall':([120,178,],[149,194,]),'allocexpression_line':([127,128,129,196,],[157,159,160,208,]),'paramlist':([144,201,],[168,213,]),'_paramlistcall':([150,],[177,]),'_paramlist':([189,190,191,],[200,203,204,]),'_allocexpression_line':([196,],[207,]),'_ifstat':([214,],[218,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> make_scope statement close_scope','program',3,'p_program','draguimantic.py',15),
  ('program -> make_scope funclist close_scope','program',3,'p_program','draguimantic.py',16),
  ('program -> make_scope empty close_scope','program',3,'p_program','draguimantic.py',17),
  ('funclist -> funcdef _funclist','funclist',2,'p_funclist','draguimantic.py',24),
  ('_funclist -> funclist','_funclist',1,'p__funclist','draguimantic.py',31),
  ('_funclist -> empty','_funclist',1,'p__funclist','draguimantic.py',32),
  ('funcdef -> DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope','funcdef',10,'p_funcdef','draguimantic.py',38),
  ('paramlist -> INT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',46),
  ('paramlist -> FLOAT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',47),
  ('paramlist -> STRING IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',48),
  ('paramlist -> empty','paramlist',1,'p_paramlist','draguimantic.py',49),
  ('_paramlist -> COMMA paramlist','_paramlist',2,'p__paramlist','draguimantic.py',57),
  ('_paramlist -> empty','_paramlist',1,'p__paramlist','draguimantic.py',58),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','draguimantic.py',64),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','draguimantic.py',65),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','draguimantic.py',66),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','draguimantic.py',67),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','draguimantic.py',68),
  ('statement -> ifstat','statement',1,'p_statement','draguimantic.py',69),
  ('statement -> forstat','statement',1,'p_statement','draguimantic.py',70),
  ('statement -> LBRACES statelist RBRACES','statement',3,'p_statement','draguimantic.py',71),
  ('statement -> check_loop_scope BREAK SEMICOLON','statement',3,'p_statement','draguimantic.py',72),
  ('statement -> SEMICOLON','statement',1,'p_statement','draguimantic.py',73),
  ('vardecl -> INT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',80),
  ('vardecl -> FLOAT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',81),
  ('vardecl -> STRING IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',82),
  ('vardecl_line -> LBRACKET INT_CONSTANT RBRACKET vardecl_line','vardecl_line',4,'p_vardecl_line','draguimantic.py',90),
  ('vardecl_line -> empty','vardecl_line',1,'p_vardecl_line','draguimantic.py',91),
  ('atribstat -> lvalue ASSIGN _atribstat','atribstat',3,'p_atribstat','draguimantic.py',97),
  ('_atribstat -> PLUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',104),
  ('_atribstat -> MINUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',105),
  ('_atribstat -> __atribstat','_atribstat',1,'p__atribstat','draguimantic.py',106),
  ('_atribstat -> IDENT ___atribstat','_atribstat',2,'p__atribstat','draguimantic.py',107),
  ('_atribstat -> allocexpression','_atribstat',1,'p__atribstat','draguimantic.py',108),
  ('_atribstat_help -> IDENT lvalue_line term_line numexpression_line _expression','_atribstat_help',5,'p__atribstat_help','draguimantic.py',117),
  ('_atribstat_help -> __atribstat','_atribstat_help',1,'p__atribstat_help','draguimantic.py',118),
  ('__atribstat -> INT_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',124),
  ('__atribstat -> FLOAT_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',125),
  ('__atribstat -> STRING_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',126),
  ('__atribstat -> NULL term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',127),
  ('__atribstat -> LPAREN numexpression RPAREN term_line numexpression_line _expression','__atribstat',6,'p___atribstat','draguimantic.py',128),
  ('___atribstat -> lvalue_line term_line numexpression_line _expression','___atribstat',4,'p____atribstat','draguimantic.py',133),
  ('___atribstat -> LPAREN paramlistcall RPAREN','___atribstat',3,'p____atribstat','draguimantic.py',134),
  ('funccall -> IDENT LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','draguimantic.py',140),
  ('paramlistcall -> IDENT _paramlistcall','paramlistcall',2,'p_paramlistcall','draguimantic.py',147),
  ('paramlistcall -> empty','paramlistcall',1,'p_paramlistcall','draguimantic.py',148),
  ('_paramlistcall -> COMMA paramlistcall','_paramlistcall',2,'p__paramlistcall','draguimantic.py',154),
  ('_paramlistcall -> empty','_paramlistcall',1,'p__paramlistcall','draguimantic.py',155),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','draguimantic.py',161),
  ('readstat -> READ lvalue','readstat',2,'p_readstat','draguimantic.py',167),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','draguimantic.py',173),
  ('ifstat -> IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat','ifstat',10,'p_ifstat','draguimantic.py',179),
  ('_ifstat -> make_scope ELSE statement close_scope','_ifstat',4,'p__ifstat','draguimantic.py',186),
  ('_ifstat -> empty','_ifstat',1,'p__ifstat','draguimantic.py',187),
  ('forstat -> FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN statement close_scope','forstat',11,'p_forstat','draguimantic.py',193),
  ('statelist -> statement _statelist','statelist',2,'p_statelist','draguimantic.py',201),
  ('_statelist -> statelist','_statelist',1,'p__statelist','draguimantic.py',208),
  ('_statelist -> empty','_statelist',1,'p__statelist','draguimantic.py',209),
  ('allocexpression -> NEW _allocexpression','allocexpression',2,'p_allocexpression','draguimantic.py',215),
  ('_allocexpression -> INT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',221),
  ('_allocexpression -> FLOAT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',222),
  ('_allocexpression -> STRING allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',223),
  ('allocexpression_line -> LBRACKET numexpression RBRACKET _allocexpression_line','allocexpression_line',4,'p_allocexpression_line','draguimantic.py',229),
  ('_allocexpression_line -> allocexpression_line','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',235),
  ('_allocexpression_line -> empty','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',236),
  ('expression -> numexpression _expression','expression',2,'p_expression','draguimantic.py',242),
  ('_expression -> LESS_THAN numexpression','_expression',2,'p__expression','draguimantic.py',248),
  ('_expression -> GREATER_THAN numexpression','_expression',2,'p__expression','draguimantic.py',249),
  ('_expression -> LESS_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',250),
  ('_expression -> GREATER_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',251),
  ('_expression -> EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',252),
  ('_expression -> NOT_EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',253),
  ('_expression -> empty','_expression',1,'p__expression','draguimantic.py',254),
  ('numexpression -> term numexpression_line','numexpression',2,'p_numexpression','draguimantic.py',260),
  ('numexpression_line -> PLUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',266),
  ('numexpression_line -> MINUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',267),
  ('numexpression_line -> empty','numexpression_line',1,'p_numexpression_line','draguimantic.py',268),
  ('term -> unaryexpr term_line','term',2,'p_term','draguimantic.py',274),
  ('term_line -> TIMES unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',280),
  ('term_line -> DIVIDE unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',281),
  ('term_line -> MODULO unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',282),
  ('term_line -> empty','term_line',1,'p_term_line','draguimantic.py',283),
  ('unaryexpr -> factor','unaryexpr',1,'p_unaryexpr','draguimantic.py',289),
  ('unaryexpr -> PLUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',290),
  ('unaryexpr -> MINUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',291),
  ('factor -> INT_CONSTANT','factor',1,'p_factor','draguimantic.py',297),
  ('factor -> FLOAT_CONSTANT','factor',1,'p_factor','draguimantic.py',298),
  ('factor -> STRING_CONSTANT','factor',1,'p_factor','draguimantic.py',299),
  ('factor -> NULL','factor',1,'p_factor','draguimantic.py',300),
  ('factor -> lvalue','factor',1,'p_factor','draguimantic.py',301),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','draguimantic.py',302),
  ('lvalue -> IDENT lvalue_line','lvalue',2,'p_lvalue','draguimantic.py',308),
  ('lvalue_line -> LBRACKET numexpression RBRACKET lvalue_line','lvalue_line',4,'p_lvalue_line','draguimantic.py',316),
  ('lvalue_line -> empty','lvalue_line',1,'p_lvalue_line','draguimantic.py',317),
  ('make_scope -> <empty>','make_scope',0,'p_make_scope','draguimantic.py',325),
  ('make_loop_scope -> <empty>','make_loop_scope',0,'p_make_loop_scope','draguimantic.py',331),
  ('check_loop_scope -> <empty>','check_loop_scope',0,'p_check_loop_scope','draguimantic.py',337),
  ('close_scope -> <empty>','close_scope',0,'p_close_scope','draguimantic.py',343),
  ('empty -> <empty>','empty',0,'p_empty','draguimantic.py',349),
]
