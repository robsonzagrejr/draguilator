
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BREAK COMMA COMMENT DEFINE DIVIDE ELSE EQUAL_TO FLOAT FLOAT_CONSTANT FOR GREATER_EQUAL_THAN GREATER_THAN IDENT IF INT INT_CONSTANT LBRACES LBRACKET LESS_EQUAL_THAN LESS_THAN LPAREN MINUS MODULO NEW NOT_EQUAL_TO NULL PLUS PRINT RBRACES RBRACKET READ RETURN RPAREN SEMICOLON STRING STRING_CONSTANT TIMESprogram : make_scope statement close_scope\n              | make_scope funclist close_scope\n              | make_scope empty close_scope\n    funclist : funcdef _funclist\n    _funclist : funclist\n                | empty\n    funcdef : DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope\n    paramlist : INT IDENT _paramlist\n                | FLOAT IDENT _paramlist\n                | STRING IDENT _paramlist\n                | empty\n    _paramlist : COMMA paramlist\n                 | empty\n    statement : vardecl SEMICOLON\n                | atribstat SEMICOLON\n                | printstat SEMICOLON\n                | readstat SEMICOLON\n                | returnstat SEMICOLON\n                | ifstat\n                | forstat\n                | LBRACES statelist RBRACES \n                | check_loop_scope BREAK SEMICOLON\n                | SEMICOLON\n    vardecl : INT IDENT vardecl_line\n              | FLOAT IDENT vardecl_line\n              | STRING IDENT vardecl_line\n    vardecl_line : LBRACKET INT_CONSTANT RBRACKET vardecl_line\n                   | empty\n    atribstat : lvalue ASSIGN _atribstat\n    _atribstat : PLUS _atribstat_help\n                 | MINUS _atribstat_help\n                 | __atribstat\n                 | IDENT ___atribstat\n                 | allocexpression\n    _atribstat_help : IDENT lvalue_line term_line numexpression_line _expression\n                      | __atribstat\n    __atribstat : INT_CONSTANT term_line numexpression_line _expression\n                 | FLOAT_CONSTANT term_line numexpression_line _expression\n                 | STRING_CONSTANT term_line numexpression_line _expression\n                 | NULL term_line numexpression_line _expression\n                 | LPAREN numexpression RPAREN term_line numexpression_line _expression\n    ___atribstat : lvalue_line term_line numexpression_line _expression\n                  | LPAREN paramlistcall RPAREN\n    funccall : IDENT LPAREN paramlistcall RPAREN\n    paramlistcall : IDENT _paramlistcall\n\t\t\t         | empty\n    _paramlistcall : COMMA paramlistcall\n\t\t\t          | empty\n    printstat : PRINT expression\n    readstat : READ lvalue\n    returnstat : RETURN\n    ifstat : IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat\n    _ifstat : make_scope ELSE statement close_scope\n              | empty\n    forstat : FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN  statement close_scope\n    statelist : statement _statelist\n    _statelist : statelist\n                 | empty\n    allocexpression : NEW _allocexpression\n    _allocexpression : INT allocexpression_line\n                       | FLOAT allocexpression_line\n                       | STRING allocexpression_line\n    allocexpression_line : LBRACKET numexpression RBRACKET _allocexpression_line\n    _allocexpression_line : allocexpression_line\n                            | empty\n    expression : numexpression _expression\n    _expression : LESS_THAN numexpression\n                  | GREATER_THAN numexpression\n                  | LESS_EQUAL_THAN numexpression\n                  | GREATER_EQUAL_THAN numexpression\n                  | EQUAL_TO numexpression\n                  | NOT_EQUAL_TO numexpression\n                  | empty\n    numexpression : make_expression_tree term numexpression_line close_expression_tree\n    numexpression_line : PLUS term numexpression_line\n                         | MINUS term numexpression_line\n                         | empty\n    term : unaryexpr term_line\n    term_line : TIMES unaryexpr term_line\n                | DIVIDE unaryexpr term_line\n                | MODULO unaryexpr term_line\n                | empty\n    unaryexpr : factor\n                 | PLUS factor\n                 | MINUS factor\n    factor : INT_CONSTANT\n             | FLOAT_CONSTANT\n             | STRING_CONSTANT\n             | NULL\n             | lvalue\n             | LPAREN numexpression RPAREN\n    lvalue : IDENT lvalue_line\n    lvalue_line : LBRACKET numexpression RBRACKET lvalue_line\n                  | empty\n    make_scope :make_loop_scope :check_loop_scope :close_scope :make_expression_tree :close_expression_tree :empty :'
    
_lr_action_items = {'LBRACES':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,163,188,190,201,212,216,217,220,221,222,224,225,226,227,],[-95,14,-23,-19,-20,14,-14,-15,-16,-17,-18,14,-21,-22,188,14,201,14,-98,-101,14,-52,-54,-98,14,-55,-98,-53,]),'SEMICOLON':([0,2,6,7,8,9,10,11,12,13,14,18,24,31,32,33,34,35,37,38,42,43,45,46,47,49,50,52,56,60,61,63,65,66,67,70,71,72,73,74,75,76,79,86,87,88,89,92,93,94,95,96,102,103,104,105,106,107,108,110,114,115,116,117,119,123,124,125,126,127,128,129,132,133,134,135,138,140,141,142,143,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,170,171,172,173,177,178,179,180,181,182,183,184,186,187,188,189,194,195,197,198,201,207,208,209,210,211,212,216,217,220,221,222,224,225,226,227,],[-95,7,31,-23,32,33,34,35,-19,-20,7,-101,-51,-14,-15,-16,-17,-18,7,60,-101,-92,-94,-101,-101,-49,-101,-50,-21,-22,-24,-28,-25,-26,-29,-32,-101,-34,-101,-101,-101,-101,-66,-73,-101,-101,-83,-86,-87,-88,-89,-90,-101,-30,-101,-36,-31,-33,-101,-101,-82,-101,-101,-101,-59,-67,-68,-69,-70,-71,-72,-100,-77,-78,-84,-85,164,-101,-93,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-60,-61,-62,-74,-101,-101,-91,-27,-101,-101,-43,-37,-79,-80,-81,-38,-39,-40,-101,-75,-76,7,200,-101,-42,-101,-101,7,-35,-41,-63,-64,-65,-98,-101,7,-52,-54,-98,7,-55,-98,-53,]),'INT':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,78,139,188,201,203,212,216,217,220,221,222,224,225,226,227,],[-95,17,-23,-19,-20,17,-14,-15,-16,-17,-18,17,-21,-22,120,166,17,17,166,-98,-101,17,-52,-54,-98,17,-55,-98,-53,]),'FLOAT':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,78,139,188,201,203,212,216,217,220,221,222,224,225,226,227,],[-95,19,-23,-19,-20,19,-14,-15,-16,-17,-18,19,-21,-22,121,167,19,19,167,-98,-101,19,-52,-54,-98,19,-55,-98,-53,]),'STRING':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,78,139,188,201,203,212,216,217,220,221,222,224,225,226,227,],[-95,20,-23,-19,-20,20,-14,-15,-16,-17,-18,20,-21,-22,122,168,20,20,168,-98,-101,20,-52,-54,-98,20,-55,-98,-53,]),'PRINT':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,22,-23,-19,-20,22,-14,-15,-16,-17,-18,22,-21,-22,22,22,-98,-101,22,-52,-54,-98,22,-55,-98,-53,]),'READ':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,23,-23,-19,-20,23,-14,-15,-16,-17,-18,23,-21,-22,23,23,-98,-101,23,-52,-54,-98,23,-55,-98,-53,]),'RETURN':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,24,-23,-19,-20,24,-14,-15,-16,-17,-18,24,-21,-22,24,24,-98,-101,24,-52,-54,-98,24,-55,-98,-53,]),'IF':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,25,-23,-19,-20,25,-14,-15,-16,-17,-18,25,-21,-22,25,25,-98,-101,25,-52,-54,-98,25,-55,-98,-53,]),'FOR':([0,2,7,12,13,14,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,26,-23,-19,-20,26,-14,-15,-16,-17,-18,26,-21,-22,26,26,-98,-101,26,-52,-54,-98,26,-55,-98,-53,]),'DEFINE':([0,2,16,218,223,],[-95,27,27,-98,-7,]),'IDENT':([0,2,7,12,13,14,17,19,20,22,23,27,31,32,33,34,35,37,44,48,51,56,60,68,69,77,80,81,82,83,84,85,90,91,97,98,99,109,111,112,113,130,131,156,164,166,167,168,175,188,200,201,212,216,217,220,221,222,224,225,226,227,],[-95,18,-23,-19,-20,18,42,46,47,-99,18,55,-14,-15,-16,-17,-18,18,-99,71,18,-21,-22,104,104,-99,-99,-99,-99,-99,-99,-99,18,18,-99,-99,18,145,18,18,18,18,18,-99,-99,191,192,193,145,18,18,18,-98,-101,18,-52,-54,-98,18,-55,-98,-53,]),'BREAK':([0,2,7,12,13,14,15,31,32,33,34,35,37,56,60,188,201,212,216,217,220,221,222,224,225,226,227,],[-95,-97,-23,-19,-20,-97,38,-14,-15,-16,-17,-18,-97,-21,-22,-97,-97,-98,-101,-97,-52,-54,-98,-97,-55,-98,-53,]),'$end':([0,1,2,3,4,5,7,12,13,16,28,29,30,31,32,33,34,35,39,40,41,56,60,212,216,218,220,221,222,223,225,226,227,],[-95,0,-101,-98,-98,-98,-23,-19,-20,-101,-1,-2,-3,-14,-15,-16,-17,-18,-4,-5,-6,-21,-22,-98,-101,-98,-52,-54,-98,-7,-55,-98,-53,]),'RBRACES':([7,12,13,31,32,33,34,35,36,37,56,57,58,59,60,199,212,214,216,220,221,222,225,226,227,],[-23,-19,-20,-14,-15,-16,-17,-18,56,-101,-21,-56,-57,-58,-22,212,-98,218,-101,-52,-54,-98,-55,-98,-53,]),'LBRACKET':([18,42,46,47,71,102,104,120,121,122,140,198,],[44,62,62,62,44,44,44,156,156,156,62,156,]),'ASSIGN':([18,21,43,45,102,141,],[-101,48,-92,-94,-101,-93,]),'TIMES':([18,43,45,71,73,74,75,76,88,89,92,93,94,95,96,102,104,108,134,135,141,142,148,149,150,154,162,],[-101,-92,-94,-101,111,111,111,111,111,-83,-86,-87,-88,-89,-90,-101,-101,111,-84,-85,-93,111,111,111,111,111,-91,]),'DIVIDE':([18,43,45,71,73,74,75,76,88,89,92,93,94,95,96,102,104,108,134,135,141,142,148,149,150,154,162,],[-101,-92,-94,-101,112,112,112,112,112,-83,-86,-87,-88,-89,-90,-101,-101,112,-84,-85,-93,112,112,112,112,112,-91,]),'MODULO':([18,43,45,71,73,74,75,76,88,89,92,93,94,95,96,102,104,108,134,135,141,142,148,149,150,154,162,],[-101,-92,-94,-101,113,113,113,113,113,-83,-86,-87,-88,-89,-90,-101,-101,113,-84,-85,-93,113,113,113,113,113,-91,]),'PLUS':([18,22,43,44,45,48,51,71,73,74,75,76,77,80,81,82,83,84,85,87,88,89,92,93,94,95,96,97,98,102,104,108,110,111,112,113,114,115,116,117,130,131,133,134,135,141,142,143,148,149,150,154,156,160,161,162,164,171,178,179,180,184,],[-101,-99,-92,-99,-94,68,90,-101,-101,-101,-101,-101,-99,-99,-99,-99,-99,-99,-99,130,-101,-83,-86,-87,-88,-89,-90,-99,-99,-101,-101,-101,130,90,90,90,-82,130,130,130,90,90,-78,-84,-85,-93,-101,130,-101,-101,-101,-101,-99,130,130,-91,-99,130,-79,-80,-81,130,]),'MINUS':([18,22,43,44,45,48,51,71,73,74,75,76,77,80,81,82,83,84,85,87,88,89,92,93,94,95,96,97,98,102,104,108,110,111,112,113,114,115,116,117,130,131,133,134,135,141,142,143,148,149,150,154,156,160,161,162,164,171,178,179,180,184,],[-101,-99,-92,-99,-94,69,91,-101,-101,-101,-101,-101,-99,-99,-99,-99,-99,-99,-99,131,-101,-83,-86,-87,-88,-89,-90,-99,-99,-101,-101,-101,131,91,91,91,-82,131,131,131,91,91,-78,-84,-85,-93,-101,131,-101,-101,-101,-101,-99,131,131,-91,-99,131,-79,-80,-81,131,]),'LESS_THAN':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,80,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,80,-101,-101,-101,80,80,80,-101,-74,-101,-101,-91,-101,80,-79,-80,-81,-101,-75,-76,80,80,]),'GREATER_THAN':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,81,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,81,-101,-101,-101,81,81,81,-101,-74,-101,-101,-91,-101,81,-79,-80,-81,-101,-75,-76,81,81,]),'LESS_EQUAL_THAN':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,82,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,82,-101,-101,-101,82,82,82,-101,-74,-101,-101,-91,-101,82,-79,-80,-81,-101,-75,-76,82,82,]),'GREATER_EQUAL_THAN':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,83,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,83,-101,-101,-101,83,83,83,-101,-74,-101,-101,-91,-101,83,-79,-80,-81,-101,-75,-76,83,83,]),'EQUAL_TO':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,84,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,84,-101,-101,-101,84,84,84,-101,-74,-101,-101,-91,-101,84,-79,-80,-81,-101,-75,-76,84,84,]),'NOT_EQUAL_TO':([18,43,45,50,71,73,74,75,76,87,88,89,92,93,94,95,96,102,104,108,110,114,115,116,117,129,132,133,134,135,141,142,143,147,148,149,150,151,152,153,154,159,160,161,162,171,172,178,179,180,184,186,187,194,197,],[-101,-92,-94,85,-101,-101,-101,-101,-101,-101,-101,-83,-86,-87,-88,-89,-90,-101,-101,-101,-101,-82,-101,-101,-101,-100,-77,-78,-84,-85,-93,-101,-101,85,-101,-101,-101,85,85,85,-101,-74,-101,-101,-91,-101,85,-79,-80,-81,-101,-75,-76,85,85,]),'RBRACKET':([18,43,45,64,87,88,89,92,93,94,95,96,101,102,114,129,132,133,134,135,141,148,149,150,159,160,161,162,178,179,180,185,186,187,],[-101,-92,-94,102,-101,-101,-83,-86,-87,-88,-89,-90,140,-101,-82,-100,-77,-78,-84,-85,-93,-101,-101,-101,-74,-101,-101,-91,-79,-80,-81,198,-75,-76,]),'RPAREN':([18,43,45,50,67,70,71,72,73,74,75,76,79,86,87,88,89,92,93,94,95,96,102,103,104,105,106,107,108,109,110,114,115,116,117,118,119,123,124,125,126,127,128,129,132,133,134,135,136,137,139,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,159,160,161,162,165,169,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,191,192,193,194,195,196,197,198,202,203,204,205,206,207,208,209,210,211,213,215,],[-101,-92,-94,-101,-29,-32,-101,-34,-101,-101,-101,-101,-66,-73,-101,-101,-83,-86,-87,-88,-89,-90,-101,-30,-101,-36,-31,-33,-101,-101,-101,-82,-101,-101,-101,154,-59,-67,-68,-69,-70,-71,-72,-100,-77,-78,-84,-85,162,163,-101,-93,-101,-101,173,-101,-46,-101,-101,-101,-101,-101,-101,-101,-101,-60,-61,-62,-74,-101,-101,-91,190,-11,-101,-101,-43,-45,-101,-48,-37,-79,-80,-81,-38,-39,-40,-101,-75,-76,-101,-101,-101,-101,-42,-47,-101,-101,-8,-101,-13,-9,-10,-35,-41,-63,-64,-65,217,-12,]),'INT_CONSTANT':([22,44,48,51,62,68,69,77,80,81,82,83,84,85,90,91,97,98,111,112,113,130,131,156,164,],[-99,-99,73,92,101,73,73,-99,-99,-99,-99,-99,-99,-99,92,92,-99,-99,92,92,92,92,92,-99,-99,]),'FLOAT_CONSTANT':([22,44,48,51,68,69,77,80,81,82,83,84,85,90,91,97,98,111,112,113,130,131,156,164,],[-99,-99,74,93,74,74,-99,-99,-99,-99,-99,-99,-99,93,93,-99,-99,93,93,93,93,93,-99,-99,]),'STRING_CONSTANT':([22,44,48,51,68,69,77,80,81,82,83,84,85,90,91,97,98,111,112,113,130,131,156,164,],[-99,-99,75,94,75,75,-99,-99,-99,-99,-99,-99,-99,94,94,-99,-99,94,94,94,94,94,-99,-99,]),'NULL':([22,44,48,51,68,69,77,80,81,82,83,84,85,90,91,97,98,111,112,113,130,131,156,164,],[-99,-99,76,95,76,76,-99,-99,-99,-99,-99,-99,-99,95,95,-99,-99,95,95,95,95,95,-99,-99,]),'LPAREN':([22,25,26,44,48,51,53,54,55,68,69,71,77,80,81,82,83,84,85,90,91,97,98,100,111,112,113,130,131,156,164,],[-99,-95,-96,-99,77,97,98,99,-95,77,77,109,-99,-99,-99,-99,-99,-99,-99,97,97,-99,-99,139,97,97,97,97,97,-99,-99,]),'NEW':([48,],[78,]),'COMMA':([145,191,192,193,],[175,203,203,203,]),'ELSE':([212,216,219,],[-98,-95,224,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'make_scope':([0,25,55,216,],[2,53,100,219,]),'statement':([2,14,37,188,201,217,224,],[3,37,37,37,37,222,226,]),'funclist':([2,16,],[4,40,]),'empty':([2,16,18,37,42,46,47,50,71,73,74,75,76,87,88,102,104,108,109,110,115,116,117,139,140,142,143,145,147,148,149,150,151,152,153,154,160,161,171,172,175,184,191,192,193,194,197,198,203,216,],[5,41,45,59,63,63,63,86,45,114,114,114,114,132,114,45,45,114,146,132,132,132,132,169,63,114,132,176,86,114,114,114,86,86,86,114,132,132,132,86,146,132,204,204,204,86,86,211,169,221,]),'vardecl':([2,14,37,188,201,217,224,],[6,6,6,6,6,6,6,]),'atribstat':([2,14,37,99,188,200,201,217,224,],[8,8,8,138,8,213,8,8,8,]),'printstat':([2,14,37,188,201,217,224,],[9,9,9,9,9,9,9,]),'readstat':([2,14,37,188,201,217,224,],[10,10,10,10,10,10,10,]),'returnstat':([2,14,37,188,201,217,224,],[11,11,11,11,11,11,11,]),'ifstat':([2,14,37,188,201,217,224,],[12,12,12,12,12,12,12,]),'forstat':([2,14,37,188,201,217,224,],[13,13,13,13,13,13,13,]),'check_loop_scope':([2,14,37,188,201,217,224,],[15,15,15,15,15,15,15,]),'funcdef':([2,16,],[16,16,]),'lvalue':([2,14,23,37,51,90,91,99,111,112,113,130,131,188,200,201,217,224,],[21,21,52,21,96,96,96,21,96,96,96,96,96,21,21,21,21,21,]),'close_scope':([3,4,5,212,218,222,226,],[28,29,30,216,223,225,227,]),'statelist':([14,37,188,201,],[36,58,199,214,]),'_funclist':([16,],[39,]),'lvalue_line':([18,71,102,104,],[43,108,141,142,]),'expression':([22,98,164,],[49,137,189,]),'numexpression':([22,44,77,80,81,82,83,84,85,97,98,156,164,],[50,64,118,123,124,125,126,127,128,136,50,185,50,]),'make_expression_tree':([22,44,77,80,81,82,83,84,85,97,98,156,164,],[51,51,51,51,51,51,51,51,51,51,51,51,51,]),'make_loop_scope':([26,],[54,]),'_statelist':([37,],[57,]),'vardecl_line':([42,46,47,140,],[61,65,66,170,]),'_atribstat':([48,],[67,]),'__atribstat':([48,68,69,],[70,105,105,]),'allocexpression':([48,],[72,]),'_expression':([50,147,151,152,153,172,194,197,],[79,177,181,182,183,195,207,208,]),'term':([51,130,131,],[87,160,161,]),'unaryexpr':([51,111,112,113,130,131,],[88,148,149,150,88,88,]),'factor':([51,90,91,111,112,113,130,131,],[89,134,135,89,89,89,89,89,]),'_atribstat_help':([68,69,],[103,106,]),'___atribstat':([71,],[107,]),'term_line':([73,74,75,76,88,108,142,148,149,150,154,],[110,115,116,117,133,143,171,178,179,180,184,]),'_allocexpression':([78,],[119,]),'numexpression_line':([87,110,115,116,117,143,160,161,171,184,],[129,147,151,152,153,172,186,187,194,197,]),'paramlistcall':([109,175,],[144,196,]),'allocexpression_line':([120,121,122,198,],[155,157,158,210,]),'close_expression_tree':([129,],[159,]),'paramlist':([139,203,],[165,215,]),'_paramlistcall':([145,],[174,]),'_paramlist':([191,192,193,],[202,205,206,]),'_allocexpression_line':([198,],[209,]),'_ifstat':([216,],[220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> make_scope statement close_scope','program',3,'p_program','draguimantic.py',27),
  ('program -> make_scope funclist close_scope','program',3,'p_program','draguimantic.py',28),
  ('program -> make_scope empty close_scope','program',3,'p_program','draguimantic.py',29),
  ('funclist -> funcdef _funclist','funclist',2,'p_funclist','draguimantic.py',35),
  ('_funclist -> funclist','_funclist',1,'p__funclist','draguimantic.py',41),
  ('_funclist -> empty','_funclist',1,'p__funclist','draguimantic.py',42),
  ('funcdef -> DEFINE IDENT make_scope LPAREN paramlist RPAREN LBRACES statelist RBRACES close_scope','funcdef',10,'p_funcdef','draguimantic.py',48),
  ('paramlist -> INT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',56),
  ('paramlist -> FLOAT IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',57),
  ('paramlist -> STRING IDENT _paramlist','paramlist',3,'p_paramlist','draguimantic.py',58),
  ('paramlist -> empty','paramlist',1,'p_paramlist','draguimantic.py',59),
  ('_paramlist -> COMMA paramlist','_paramlist',2,'p__paramlist','draguimantic.py',67),
  ('_paramlist -> empty','_paramlist',1,'p__paramlist','draguimantic.py',68),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','draguimantic.py',74),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','draguimantic.py',75),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','draguimantic.py',76),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','draguimantic.py',77),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','draguimantic.py',78),
  ('statement -> ifstat','statement',1,'p_statement','draguimantic.py',79),
  ('statement -> forstat','statement',1,'p_statement','draguimantic.py',80),
  ('statement -> LBRACES statelist RBRACES','statement',3,'p_statement','draguimantic.py',81),
  ('statement -> check_loop_scope BREAK SEMICOLON','statement',3,'p_statement','draguimantic.py',82),
  ('statement -> SEMICOLON','statement',1,'p_statement','draguimantic.py',83),
  ('vardecl -> INT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',89),
  ('vardecl -> FLOAT IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',90),
  ('vardecl -> STRING IDENT vardecl_line','vardecl',3,'p_vardecl','draguimantic.py',91),
  ('vardecl_line -> LBRACKET INT_CONSTANT RBRACKET vardecl_line','vardecl_line',4,'p_vardecl_line','draguimantic.py',98),
  ('vardecl_line -> empty','vardecl_line',1,'p_vardecl_line','draguimantic.py',99),
  ('atribstat -> lvalue ASSIGN _atribstat','atribstat',3,'p_atribstat','draguimantic.py',105),
  ('_atribstat -> PLUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',111),
  ('_atribstat -> MINUS _atribstat_help','_atribstat',2,'p__atribstat','draguimantic.py',112),
  ('_atribstat -> __atribstat','_atribstat',1,'p__atribstat','draguimantic.py',113),
  ('_atribstat -> IDENT ___atribstat','_atribstat',2,'p__atribstat','draguimantic.py',114),
  ('_atribstat -> allocexpression','_atribstat',1,'p__atribstat','draguimantic.py',115),
  ('_atribstat_help -> IDENT lvalue_line term_line numexpression_line _expression','_atribstat_help',5,'p__atribstat_help','draguimantic.py',127),
  ('_atribstat_help -> __atribstat','_atribstat_help',1,'p__atribstat_help','draguimantic.py',128),
  ('__atribstat -> INT_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',136),
  ('__atribstat -> FLOAT_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',137),
  ('__atribstat -> STRING_CONSTANT term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',138),
  ('__atribstat -> NULL term_line numexpression_line _expression','__atribstat',4,'p___atribstat','draguimantic.py',139),
  ('__atribstat -> LPAREN numexpression RPAREN term_line numexpression_line _expression','__atribstat',6,'p___atribstat','draguimantic.py',140),
  ('___atribstat -> lvalue_line term_line numexpression_line _expression','___atribstat',4,'p____atribstat','draguimantic.py',145),
  ('___atribstat -> LPAREN paramlistcall RPAREN','___atribstat',3,'p____atribstat','draguimantic.py',146),
  ('funccall -> IDENT LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','draguimantic.py',158),
  ('paramlistcall -> IDENT _paramlistcall','paramlistcall',2,'p_paramlistcall','draguimantic.py',164),
  ('paramlistcall -> empty','paramlistcall',1,'p_paramlistcall','draguimantic.py',165),
  ('_paramlistcall -> COMMA paramlistcall','_paramlistcall',2,'p__paramlistcall','draguimantic.py',173),
  ('_paramlistcall -> empty','_paramlistcall',1,'p__paramlistcall','draguimantic.py',174),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','draguimantic.py',180),
  ('readstat -> READ lvalue','readstat',2,'p_readstat','draguimantic.py',186),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','draguimantic.py',192),
  ('ifstat -> IF make_scope LPAREN expression RPAREN LBRACES statelist RBRACES close_scope _ifstat','ifstat',10,'p_ifstat','draguimantic.py',198),
  ('_ifstat -> make_scope ELSE statement close_scope','_ifstat',4,'p__ifstat','draguimantic.py',204),
  ('_ifstat -> empty','_ifstat',1,'p__ifstat','draguimantic.py',205),
  ('forstat -> FOR make_loop_scope LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN statement close_scope','forstat',11,'p_forstat','draguimantic.py',211),
  ('statelist -> statement _statelist','statelist',2,'p_statelist','draguimantic.py',217),
  ('_statelist -> statelist','_statelist',1,'p__statelist','draguimantic.py',223),
  ('_statelist -> empty','_statelist',1,'p__statelist','draguimantic.py',224),
  ('allocexpression -> NEW _allocexpression','allocexpression',2,'p_allocexpression','draguimantic.py',230),
  ('_allocexpression -> INT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',236),
  ('_allocexpression -> FLOAT allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',237),
  ('_allocexpression -> STRING allocexpression_line','_allocexpression',2,'p__allocexpression','draguimantic.py',238),
  ('allocexpression_line -> LBRACKET numexpression RBRACKET _allocexpression_line','allocexpression_line',4,'p_allocexpression_line','draguimantic.py',244),
  ('_allocexpression_line -> allocexpression_line','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',250),
  ('_allocexpression_line -> empty','_allocexpression_line',1,'p__allocexpression_line','draguimantic.py',251),
  ('expression -> numexpression _expression','expression',2,'p_expression','draguimantic.py',257),
  ('_expression -> LESS_THAN numexpression','_expression',2,'p__expression','draguimantic.py',263),
  ('_expression -> GREATER_THAN numexpression','_expression',2,'p__expression','draguimantic.py',264),
  ('_expression -> LESS_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',265),
  ('_expression -> GREATER_EQUAL_THAN numexpression','_expression',2,'p__expression','draguimantic.py',266),
  ('_expression -> EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',267),
  ('_expression -> NOT_EQUAL_TO numexpression','_expression',2,'p__expression','draguimantic.py',268),
  ('_expression -> empty','_expression',1,'p__expression','draguimantic.py',269),
  ('numexpression -> make_expression_tree term numexpression_line close_expression_tree','numexpression',4,'p_numexpression','draguimantic.py',275),
  ('numexpression_line -> PLUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',281),
  ('numexpression_line -> MINUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguimantic.py',282),
  ('numexpression_line -> empty','numexpression_line',1,'p_numexpression_line','draguimantic.py',283),
  ('term -> unaryexpr term_line','term',2,'p_term','draguimantic.py',289),
  ('term_line -> TIMES unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',295),
  ('term_line -> DIVIDE unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',296),
  ('term_line -> MODULO unaryexpr term_line','term_line',3,'p_term_line','draguimantic.py',297),
  ('term_line -> empty','term_line',1,'p_term_line','draguimantic.py',298),
  ('unaryexpr -> factor','unaryexpr',1,'p_unaryexpr','draguimantic.py',304),
  ('unaryexpr -> PLUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',305),
  ('unaryexpr -> MINUS factor','unaryexpr',2,'p_unaryexpr','draguimantic.py',306),
  ('factor -> INT_CONSTANT','factor',1,'p_factor','draguimantic.py',312),
  ('factor -> FLOAT_CONSTANT','factor',1,'p_factor','draguimantic.py',313),
  ('factor -> STRING_CONSTANT','factor',1,'p_factor','draguimantic.py',314),
  ('factor -> NULL','factor',1,'p_factor','draguimantic.py',315),
  ('factor -> lvalue','factor',1,'p_factor','draguimantic.py',316),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','draguimantic.py',317),
  ('lvalue -> IDENT lvalue_line','lvalue',2,'p_lvalue','draguimantic.py',325),
  ('lvalue_line -> LBRACKET numexpression RBRACKET lvalue_line','lvalue_line',4,'p_lvalue_line','draguimantic.py',332),
  ('lvalue_line -> empty','lvalue_line',1,'p_lvalue_line','draguimantic.py',333),
  ('make_scope -> <empty>','make_scope',0,'p_make_scope','draguimantic.py',341),
  ('make_loop_scope -> <empty>','make_loop_scope',0,'p_make_loop_scope','draguimantic.py',347),
  ('check_loop_scope -> <empty>','check_loop_scope',0,'p_check_loop_scope','draguimantic.py',353),
  ('close_scope -> <empty>','close_scope',0,'p_close_scope','draguimantic.py',359),
  ('make_expression_tree -> <empty>','make_expression_tree',0,'p_make_expression_tree','draguimantic.py',365),
  ('close_expression_tree -> <empty>','close_expression_tree',0,'p_close_expression_tree','draguimantic.py',371),
  ('empty -> <empty>','empty',0,'p_empty','draguimantic.py',377),
]
