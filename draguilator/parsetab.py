
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BREAK COMMA COMMENT DEFINE DIVIDE ELSE EQUAL_TO FLOAT FLOAT_CONSTANT FOR GREATER_EQUAL_THAN GREATER_THAN IDENT IF INT INT_CONSTANT LBRACES LBRACKET LESS_EQUAL_THAN LESS_THAN LPAREN MINUS MODULO NEW NOT_EQUAL_TO NULL PLUS PRINT RBRACES RBRACKET READ RETURN RPAREN SEMICOLON STRING STRING_CONSTANT TIMESprogram : statement\n              | funclist\n              | empty\n    funclist : funcdef _funclist\n    _funclist : funclist\n                | empty\n    funcdef : DEFINE IDENT LPAREN paramlist RPAREN LBRACES statelist RBRACES\n    paramlist : INT IDENT _paramlist\n                | FLOAT IDENT _paramlist\n                | STRING IDENT _paramlist\n                | empty\n    _paramlist : COMMA paramlist\n                 | empty\n    statement : vardecl SEMICOLON\n                | atribstat SEMICOLON\n                | printstat SEMICOLON\n                | readstat SEMICOLON\n                | returnstat SEMICOLON\n                | ifstat\n                | forstat \n                | LBRACES statelist RBRACES\n                | BREAK SEMICOLON\n                | SEMICOLON\n    vardecl : INT IDENT vardecl_line\n              | FLOAT IDENT vardecl_line\n              | STRING IDENT vardecl_line\n    vardecl_line : LBRACKET INT_CONSTANT RBRACKET vardecl_line\n                   | empty\n    atribstat : lvalue ASSIGN _atribstat\n    _atribstat : INT_CONSTANT term_line _expression\n                 | FLOAT_CONSTANT term_line _expression\n                 | STRING_CONSTANT term_line _expression\n                 | NULL term_line _expression\n                 | IDENT __atribstat\n                 | LPAREN numexpression RPAREN term_line _expression\n                 | PLUS _numexpression _expression\n                 | MINUS _numexpression _expression\n                 | _expression\n                 | allocexpression\n    __atribstat : lvalue_line term_line _expression\n                  | LPAREN paramlistcall RPAREN\n    funccall : IDENT LPAREN paramlistcall RPAREN\n    paramlistcall : IDENT _paramlistcall\n\t\t\t         | empty\n    _paramlistcall : COMMA paramlistcall\n\t\t\t          | empty\n    printstat : PRINT expression\n    readstat : READ lvalue\n    returnstat : RETURN\n    ifstat : IF LPAREN expression RPAREN statement _ifstat\n    _ifstat : ELSE statement\n              | empty\n    forstat : FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN statement\n    statelist : statement _statelist\n    _statelist : statelist\n                 | empty\n    allocexpression : NEW _allocexpression\n    _allocexpression : INT allocexpression_line\n                       | FLOAT allocexpression_line\n                       | STRING allocexpression_line\n    allocexpression_line : LBRACKET numexpression RBRACKET _allocexpression_line\n    _allocexpression_line : allocexpression_line\n                            | empty\n    expression : numexpression _expression\n    _expression : LESS_THAN numexpression\n                  | GREATER_THAN numexpression\n                  | LESS_EQUAL_THAN numexpression\n                  | GREATER_EQUAL_THAN numexpression\n                  | EQUAL_TO numexpression\n                  | NOT_EQUAL_TO numexpression\n    numexpression : factor term_line\n                    | PLUS _numexpression\n                    | MINUS _numexpression\n                    | empty\n    _numexpression : factor term_line\n                     | term numexpression_line\n    numexpression_line : PLUS term numexpression_line\n                         | MINUS term numexpression_line\n                         | empty\n    term : unaryexpre term_line\n    term_line : TIMES unaryexpre term_line\n                | DIVIDE unaryexpre term_line\n                | MODULO unaryexpre term_line\n                | empty\n    unaryexpre : factor\n                 | PLUS factor\n                 | MINUS factor\n    factor : INT_CONSTANT\n             | FLOAT_CONSTANT\n             | STRING_CONSTANT\n             | NULL\n             | lvalue\n             | LPAREN numexpression RPAREN\n    lvalue : IDENT lvalue_line\n    lvalue_line : LBRACKET numexpression RBRACKET lvalue_line\n                  | empty\n    empty : '
    
_lr_action_items = {'LBRACES':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,172,186,187,188,190,199,206,208,],[13,-23,-19,-20,13,-14,-15,-16,-17,-18,13,-22,-21,13,-97,190,-50,13,-52,13,-51,13,-53,]),'BREAK':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[14,-23,-19,-20,14,-14,-15,-16,-17,-18,14,-22,-21,14,-97,-50,14,-52,14,-51,14,-53,]),'SEMICOLON':([0,5,6,7,8,9,10,11,12,13,14,17,23,27,28,29,30,31,33,34,38,39,41,42,43,45,47,50,51,52,53,54,55,57,61,65,67,69,70,71,73,81,82,83,84,85,86,87,89,90,94,96,97,98,99,101,104,107,112,118,119,120,121,122,123,124,128,129,130,131,132,133,134,137,138,139,140,141,148,149,150,151,152,153,159,160,161,163,164,165,166,167,168,169,170,171,176,177,178,184,185,186,187,188,190,197,198,199,203,204,205,206,208,],[6,27,-23,28,29,30,31,-19,-20,6,34,-97,-49,-14,-15,-16,-17,-18,6,-22,-97,-94,-96,-97,-97,-47,-97,-74,-88,-89,-90,-91,-92,-48,-21,-24,-28,-25,-26,-29,-38,-39,-97,-97,-97,-97,-97,-97,-64,-71,-84,-72,-85,-97,-97,-73,142,-97,-34,-65,-66,-67,-68,-69,-70,-57,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,6,-97,-95,-30,-31,-32,-33,-36,-37,-58,-59,-60,-81,-82,-83,-97,-97,-97,189,-27,-40,-41,-77,-78,-50,6,-52,6,-35,-97,-51,-61,-62,-63,6,-53,]),'$end':([0,1,2,3,4,6,11,12,15,27,28,29,30,31,34,35,36,37,61,170,186,188,199,207,208,],[-97,0,-1,-2,-3,-23,-19,-20,-97,-14,-15,-16,-17,-18,-22,-4,-5,-6,-21,-97,-50,-52,-51,-7,-53,]),'INT':([0,6,11,12,13,27,28,29,30,31,33,34,61,88,105,141,170,186,187,188,190,192,199,206,208,],[16,-23,-19,-20,16,-14,-15,-16,-17,-18,16,-22,-21,125,144,16,-97,-50,16,-52,16,144,-51,16,-53,]),'FLOAT':([0,6,11,12,13,27,28,29,30,31,33,34,61,88,105,141,170,186,187,188,190,192,199,206,208,],[18,-23,-19,-20,18,-14,-15,-16,-17,-18,18,-22,-21,126,145,18,-97,-50,18,-52,18,145,-51,18,-53,]),'STRING':([0,6,11,12,13,27,28,29,30,31,33,34,61,88,105,141,170,186,187,188,190,192,199,206,208,],[19,-23,-19,-20,19,-14,-15,-16,-17,-18,19,-22,-21,127,146,19,-97,-50,19,-52,19,146,-51,19,-53,]),'PRINT':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[21,-23,-19,-20,21,-14,-15,-16,-17,-18,21,-22,-21,21,-97,-50,21,-52,21,-51,21,-53,]),'READ':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[22,-23,-19,-20,22,-14,-15,-16,-17,-18,22,-22,-21,22,-97,-50,22,-52,22,-51,22,-53,]),'RETURN':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[23,-23,-19,-20,23,-14,-15,-16,-17,-18,23,-22,-21,23,-97,-50,23,-52,23,-51,23,-53,]),'IF':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[24,-23,-19,-20,24,-14,-15,-16,-17,-18,24,-22,-21,24,-97,-50,24,-52,24,-51,24,-53,]),'FOR':([0,6,11,12,13,27,28,29,30,31,33,34,61,141,170,186,187,188,190,199,206,208,],[25,-23,-19,-20,25,-14,-15,-16,-17,-18,25,-22,-21,25,-97,-50,25,-52,25,-51,25,-53,]),'DEFINE':([0,15,207,],[26,26,-7,]),'IDENT':([0,6,11,12,13,16,18,19,21,22,26,27,28,29,30,31,33,34,40,44,48,49,56,58,59,61,78,79,80,82,83,84,85,86,87,91,92,93,95,100,114,135,136,141,142,144,145,146,162,170,180,186,187,188,189,190,199,206,208,],[17,-23,-19,-20,17,38,42,43,17,17,60,-14,-15,-16,-17,-18,17,-22,17,77,17,17,17,17,17,-21,17,17,17,17,17,17,17,17,17,17,17,17,17,17,156,17,17,17,17,173,174,175,17,-97,156,-50,17,-52,17,17,-51,17,-53,]),'RBRACES':([6,11,12,27,28,29,30,31,32,33,34,61,62,63,64,170,186,188,199,201,208,],[-23,-19,-20,-14,-15,-16,-17,-18,61,-97,-22,-21,-54,-55,-56,-97,-50,-52,-51,207,-53,]),'ELSE':([6,11,12,27,28,29,30,31,34,61,170,186,188,199,208,],[-23,-19,-20,-14,-15,-16,-17,-18,-22,-21,187,-50,-52,-51,-53,]),'LBRACKET':([17,38,42,43,77,107,125,126,127,148,198,],[40,66,66,66,40,40,162,162,162,66,162,]),'ASSIGN':([17,20,39,41,107,149,],[-97,44,-94,-96,-97,-95,]),'TIMES':([17,39,41,47,51,52,53,54,55,72,74,75,76,77,97,99,107,113,128,129,130,131,132,139,140,149,158,],[-97,-94,-96,91,-88,-89,-90,-91,-92,91,91,91,91,-97,91,91,-97,91,91,-85,91,91,-86,-87,-93,-95,91,]),'DIVIDE':([17,39,41,47,51,52,53,54,55,72,74,75,76,77,97,99,107,113,128,129,130,131,132,139,140,149,158,],[-97,-94,-96,92,-88,-89,-90,-91,-92,92,92,92,92,-97,92,92,-97,92,92,-85,92,92,-86,-87,-93,-95,92,]),'MODULO':([17,39,41,47,51,52,53,54,55,72,74,75,76,77,97,99,107,113,128,129,130,131,132,139,140,149,158,],[-97,-94,-96,93,-88,-89,-90,-91,-92,93,93,93,93,-97,93,93,-97,93,93,-85,93,93,-86,-87,-93,-95,93,]),'LESS_THAN':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,82,82,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,82,82,82,82,-97,82,82,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,82,-97,-81,-82,-83,-97,-97,82,-77,-78,]),'GREATER_THAN':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,83,83,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,83,83,83,83,-97,83,83,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,83,-97,-81,-82,-83,-97,-97,83,-77,-78,]),'LESS_EQUAL_THAN':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,84,84,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,84,84,84,84,-97,84,84,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,84,-97,-81,-82,-83,-97,-97,84,-77,-78,]),'GREATER_EQUAL_THAN':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,85,85,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,85,85,85,85,-97,85,85,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,85,-97,-81,-82,-83,-97,-97,85,-77,-78,]),'EQUAL_TO':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,86,86,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,86,86,86,86,-97,86,86,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,86,-97,-81,-82,-83,-97,-97,86,-77,-78,]),'NOT_EQUAL_TO':([17,21,39,41,44,46,47,50,51,52,53,54,55,58,72,74,75,76,77,90,94,96,97,98,99,101,107,108,109,110,111,113,116,117,128,129,130,131,132,133,134,137,138,139,140,142,149,154,158,165,166,167,168,169,182,184,185,],[-97,-97,-94,-96,87,87,-97,-74,-88,-89,-90,-91,-92,-97,-97,-97,-97,-97,-97,-71,-84,-72,-85,-97,-97,-73,-97,87,87,87,87,-97,87,87,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-97,-95,87,-97,-81,-82,-83,-97,-97,87,-77,-78,]),'RBRACKET':([17,39,40,41,47,50,51,52,53,54,55,68,90,94,96,97,98,99,101,106,107,128,129,130,131,132,133,134,137,138,139,140,149,162,165,166,167,168,169,183,184,185,],[-97,-94,-97,-96,-97,-74,-88,-89,-90,-91,-92,107,-71,-84,-72,-85,-97,-97,-73,148,-97,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,-95,-97,-81,-82,-83,-97,-97,198,-77,-78,]),'RPAREN':([17,39,41,47,50,51,52,53,54,55,56,71,73,78,81,82,83,84,85,86,87,89,90,94,96,97,98,99,101,102,103,105,107,112,114,115,118,119,120,121,122,123,124,128,129,130,131,132,133,134,137,138,139,140,143,147,149,150,151,152,153,155,156,157,159,160,161,163,164,165,166,167,168,169,173,174,175,177,178,179,180,181,184,185,191,192,193,194,195,196,197,198,200,202,203,204,205,],[-97,-94,-96,-97,-74,-88,-89,-90,-91,-92,-97,-29,-38,-97,-39,-97,-97,-97,-97,-97,-97,-64,-71,-84,-72,-85,-97,-97,-73,140,141,-97,-97,-34,-97,158,-65,-66,-67,-68,-69,-70,-57,-97,-85,-97,-97,-86,-75,-76,-79,-80,-87,-93,172,-11,-95,-30,-31,-32,-33,178,-97,-44,-36,-37,-58,-59,-60,-81,-82,-83,-97,-97,-97,-97,-97,-40,-41,-43,-97,-46,-77,-78,-8,-97,-13,-9,-10,-45,-35,-97,206,-12,-61,-62,-63,]),'PLUS':([17,21,39,40,41,44,48,49,51,52,53,54,55,56,58,78,79,80,82,83,84,85,86,87,91,92,93,94,97,98,99,107,128,129,130,131,132,135,136,138,139,140,142,149,162,165,166,167,168,169,],[-97,48,-94,48,-96,79,95,95,-88,-89,-90,-91,-92,48,48,48,95,95,48,48,48,48,48,48,95,95,95,-84,-85,135,-97,-97,-97,-85,-97,-97,-86,95,95,-80,-87,-93,48,-95,48,-81,-82,-83,135,135,]),'MINUS':([17,21,39,40,41,44,48,49,51,52,53,54,55,56,58,78,79,80,82,83,84,85,86,87,91,92,93,94,97,98,99,107,128,129,130,131,132,135,136,138,139,140,142,149,162,165,166,167,168,169,],[-97,49,-94,49,-96,80,100,100,-88,-89,-90,-91,-92,49,49,49,100,100,49,49,49,49,49,49,100,100,100,-84,-85,136,-97,-97,-97,-85,-97,-97,-86,100,100,-80,-87,-93,49,-95,49,-81,-82,-83,136,136,]),'INT_CONSTANT':([21,40,44,48,49,56,58,66,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[51,51,72,51,51,51,51,106,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'FLOAT_CONSTANT':([21,40,44,48,49,56,58,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[52,52,74,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING_CONSTANT':([21,40,44,48,49,56,58,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[53,53,75,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'NULL':([21,40,44,48,49,56,58,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[54,54,76,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'LPAREN':([21,24,25,40,44,48,49,56,58,60,77,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[56,58,59,56,78,56,56,56,56,105,114,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'NEW':([44,],[88,]),'COMMA':([156,173,174,175,],[180,192,192,192,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,13,33,141,187,190,206,],[2,33,33,170,199,33,208,]),'funclist':([0,15,],[3,36,]),'empty':([0,15,17,21,33,38,40,42,43,47,56,58,72,74,75,76,77,78,82,83,84,85,86,87,97,98,99,105,107,113,114,128,130,131,142,148,156,158,162,168,169,170,173,174,175,180,192,198,],[4,37,41,50,64,67,50,67,67,94,50,50,94,94,94,94,41,50,50,50,50,50,50,50,94,137,94,147,41,94,157,94,94,94,50,67,181,94,50,137,137,188,193,193,193,157,147,205,]),'vardecl':([0,13,33,141,187,190,206,],[5,5,5,5,5,5,5,]),'atribstat':([0,13,33,59,141,187,189,190,206,],[7,7,7,104,7,7,200,7,7,]),'printstat':([0,13,33,141,187,190,206,],[8,8,8,8,8,8,8,]),'readstat':([0,13,33,141,187,190,206,],[9,9,9,9,9,9,9,]),'returnstat':([0,13,33,141,187,190,206,],[10,10,10,10,10,10,10,]),'ifstat':([0,13,33,141,187,190,206,],[11,11,11,11,11,11,11,]),'forstat':([0,13,33,141,187,190,206,],[12,12,12,12,12,12,12,]),'funcdef':([0,15,],[15,15,]),'lvalue':([0,13,21,22,33,40,48,49,56,58,59,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,141,142,162,187,189,190,206,],[20,20,55,57,20,55,55,55,55,55,20,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,20,55,55,20,20,20,20,]),'statelist':([13,33,190,],[32,63,201,]),'_funclist':([15,],[35,]),'lvalue_line':([17,77,107,],[39,113,149,]),'expression':([21,58,142,],[45,103,171,]),'numexpression':([21,40,56,58,78,82,83,84,85,86,87,142,162,],[46,68,102,46,115,118,119,120,121,122,123,46,183,]),'factor':([21,40,48,49,56,58,78,79,80,82,83,84,85,86,87,91,92,93,95,100,135,136,142,162,],[47,47,97,97,47,47,47,97,97,47,47,47,47,47,47,129,129,129,132,139,129,129,47,47,]),'_statelist':([33,],[62,]),'vardecl_line':([38,42,43,148,],[65,69,70,176,]),'_atribstat':([44,],[71,]),'_expression':([44,46,108,109,110,111,116,117,154,182,],[73,89,150,151,152,153,159,160,177,197,]),'allocexpression':([44,],[81,]),'term_line':([47,72,74,75,76,97,99,113,128,130,131,158,],[90,108,109,110,111,133,138,154,165,166,167,182,]),'_numexpression':([48,49,79,80,],[96,101,116,117,]),'term':([48,49,79,80,135,136,],[98,98,98,98,168,169,]),'unaryexpre':([48,49,79,80,91,92,93,135,136,],[99,99,99,99,128,130,131,99,99,]),'__atribstat':([77,],[112,]),'_allocexpression':([88,],[124,]),'numexpression_line':([98,168,169,],[134,184,185,]),'paramlist':([105,192,],[143,202,]),'paramlistcall':([114,180,],[155,196,]),'allocexpression_line':([125,126,127,198,],[161,163,164,204,]),'_paramlistcall':([156,],[179,]),'_ifstat':([170,],[186,]),'_paramlist':([173,174,175,],[191,194,195,]),'_allocexpression_line':([198,],[203,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','draguitax.py',14),
  ('program -> funclist','program',1,'p_program','draguitax.py',15),
  ('program -> empty','program',1,'p_program','draguitax.py',16),
  ('funclist -> funcdef _funclist','funclist',2,'p_funclist','draguitax.py',22),
  ('_funclist -> funclist','_funclist',1,'p__funclist','draguitax.py',28),
  ('_funclist -> empty','_funclist',1,'p__funclist','draguitax.py',29),
  ('funcdef -> DEFINE IDENT LPAREN paramlist RPAREN LBRACES statelist RBRACES','funcdef',8,'p_funcdef','draguitax.py',35),
  ('paramlist -> INT IDENT _paramlist','paramlist',3,'p_paramlist','draguitax.py',41),
  ('paramlist -> FLOAT IDENT _paramlist','paramlist',3,'p_paramlist','draguitax.py',42),
  ('paramlist -> STRING IDENT _paramlist','paramlist',3,'p_paramlist','draguitax.py',43),
  ('paramlist -> empty','paramlist',1,'p_paramlist','draguitax.py',44),
  ('_paramlist -> COMMA paramlist','_paramlist',2,'p__paramlist','draguitax.py',50),
  ('_paramlist -> empty','_paramlist',1,'p__paramlist','draguitax.py',51),
  ('statement -> vardecl SEMICOLON','statement',2,'p_statement','draguitax.py',57),
  ('statement -> atribstat SEMICOLON','statement',2,'p_statement','draguitax.py',58),
  ('statement -> printstat SEMICOLON','statement',2,'p_statement','draguitax.py',59),
  ('statement -> readstat SEMICOLON','statement',2,'p_statement','draguitax.py',60),
  ('statement -> returnstat SEMICOLON','statement',2,'p_statement','draguitax.py',61),
  ('statement -> ifstat','statement',1,'p_statement','draguitax.py',62),
  ('statement -> forstat','statement',1,'p_statement','draguitax.py',63),
  ('statement -> LBRACES statelist RBRACES','statement',3,'p_statement','draguitax.py',64),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','draguitax.py',65),
  ('statement -> SEMICOLON','statement',1,'p_statement','draguitax.py',66),
  ('vardecl -> INT IDENT vardecl_line','vardecl',3,'p_vardecl','draguitax.py',72),
  ('vardecl -> FLOAT IDENT vardecl_line','vardecl',3,'p_vardecl','draguitax.py',73),
  ('vardecl -> STRING IDENT vardecl_line','vardecl',3,'p_vardecl','draguitax.py',74),
  ('vardecl_line -> LBRACKET INT_CONSTANT RBRACKET vardecl_line','vardecl_line',4,'p_vardecl_line','draguitax.py',80),
  ('vardecl_line -> empty','vardecl_line',1,'p_vardecl_line','draguitax.py',81),
  ('atribstat -> lvalue ASSIGN _atribstat','atribstat',3,'p_atribstat','draguitax.py',87),
  ('_atribstat -> INT_CONSTANT term_line _expression','_atribstat',3,'p__atribstat','draguitax.py',93),
  ('_atribstat -> FLOAT_CONSTANT term_line _expression','_atribstat',3,'p__atribstat','draguitax.py',94),
  ('_atribstat -> STRING_CONSTANT term_line _expression','_atribstat',3,'p__atribstat','draguitax.py',95),
  ('_atribstat -> NULL term_line _expression','_atribstat',3,'p__atribstat','draguitax.py',96),
  ('_atribstat -> IDENT __atribstat','_atribstat',2,'p__atribstat','draguitax.py',97),
  ('_atribstat -> LPAREN numexpression RPAREN term_line _expression','_atribstat',5,'p__atribstat','draguitax.py',98),
  ('_atribstat -> PLUS _numexpression _expression','_atribstat',3,'p__atribstat','draguitax.py',99),
  ('_atribstat -> MINUS _numexpression _expression','_atribstat',3,'p__atribstat','draguitax.py',100),
  ('_atribstat -> _expression','_atribstat',1,'p__atribstat','draguitax.py',101),
  ('_atribstat -> allocexpression','_atribstat',1,'p__atribstat','draguitax.py',102),
  ('__atribstat -> lvalue_line term_line _expression','__atribstat',3,'p___atribstat','draguitax.py',107),
  ('__atribstat -> LPAREN paramlistcall RPAREN','__atribstat',3,'p___atribstat','draguitax.py',108),
  ('funccall -> IDENT LPAREN paramlistcall RPAREN','funccall',4,'p_funccall','draguitax.py',114),
  ('paramlistcall -> IDENT _paramlistcall','paramlistcall',2,'p_paramlistcall','draguitax.py',121),
  ('paramlistcall -> empty','paramlistcall',1,'p_paramlistcall','draguitax.py',122),
  ('_paramlistcall -> COMMA paramlistcall','_paramlistcall',2,'p__paramlistcall','draguitax.py',128),
  ('_paramlistcall -> empty','_paramlistcall',1,'p__paramlistcall','draguitax.py',129),
  ('printstat -> PRINT expression','printstat',2,'p_printstat','draguitax.py',135),
  ('readstat -> READ lvalue','readstat',2,'p_readstat','draguitax.py',141),
  ('returnstat -> RETURN','returnstat',1,'p_returnstat','draguitax.py',147),
  ('ifstat -> IF LPAREN expression RPAREN statement _ifstat','ifstat',6,'p_ifstat','draguitax.py',153),
  ('_ifstat -> ELSE statement','_ifstat',2,'p__ifstat','draguitax.py',159),
  ('_ifstat -> empty','_ifstat',1,'p__ifstat','draguitax.py',160),
  ('forstat -> FOR LPAREN atribstat SEMICOLON expression SEMICOLON atribstat RPAREN statement','forstat',9,'p_forstat','draguitax.py',166),
  ('statelist -> statement _statelist','statelist',2,'p_statelist','draguitax.py',172),
  ('_statelist -> statelist','_statelist',1,'p__statelist','draguitax.py',178),
  ('_statelist -> empty','_statelist',1,'p__statelist','draguitax.py',179),
  ('allocexpression -> NEW _allocexpression','allocexpression',2,'p_allocexpression','draguitax.py',185),
  ('_allocexpression -> INT allocexpression_line','_allocexpression',2,'p__allocexpression','draguitax.py',191),
  ('_allocexpression -> FLOAT allocexpression_line','_allocexpression',2,'p__allocexpression','draguitax.py',192),
  ('_allocexpression -> STRING allocexpression_line','_allocexpression',2,'p__allocexpression','draguitax.py',193),
  ('allocexpression_line -> LBRACKET numexpression RBRACKET _allocexpression_line','allocexpression_line',4,'p_allocexpression_line','draguitax.py',199),
  ('_allocexpression_line -> allocexpression_line','_allocexpression_line',1,'p__allocexpression_line','draguitax.py',205),
  ('_allocexpression_line -> empty','_allocexpression_line',1,'p__allocexpression_line','draguitax.py',206),
  ('expression -> numexpression _expression','expression',2,'p_expression','draguitax.py',212),
  ('_expression -> LESS_THAN numexpression','_expression',2,'p__expression','draguitax.py',218),
  ('_expression -> GREATER_THAN numexpression','_expression',2,'p__expression','draguitax.py',219),
  ('_expression -> LESS_EQUAL_THAN numexpression','_expression',2,'p__expression','draguitax.py',220),
  ('_expression -> GREATER_EQUAL_THAN numexpression','_expression',2,'p__expression','draguitax.py',221),
  ('_expression -> EQUAL_TO numexpression','_expression',2,'p__expression','draguitax.py',222),
  ('_expression -> NOT_EQUAL_TO numexpression','_expression',2,'p__expression','draguitax.py',223),
  ('numexpression -> factor term_line','numexpression',2,'p_numexpression','draguitax.py',229),
  ('numexpression -> PLUS _numexpression','numexpression',2,'p_numexpression','draguitax.py',230),
  ('numexpression -> MINUS _numexpression','numexpression',2,'p_numexpression','draguitax.py',231),
  ('numexpression -> empty','numexpression',1,'p_numexpression','draguitax.py',232),
  ('_numexpression -> factor term_line','_numexpression',2,'p__numexpression','draguitax.py',238),
  ('_numexpression -> term numexpression_line','_numexpression',2,'p__numexpression','draguitax.py',239),
  ('numexpression_line -> PLUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguitax.py',245),
  ('numexpression_line -> MINUS term numexpression_line','numexpression_line',3,'p_numexpression_line','draguitax.py',246),
  ('numexpression_line -> empty','numexpression_line',1,'p_numexpression_line','draguitax.py',247),
  ('term -> unaryexpre term_line','term',2,'p_term','draguitax.py',253),
  ('term_line -> TIMES unaryexpre term_line','term_line',3,'p_term_line','draguitax.py',259),
  ('term_line -> DIVIDE unaryexpre term_line','term_line',3,'p_term_line','draguitax.py',260),
  ('term_line -> MODULO unaryexpre term_line','term_line',3,'p_term_line','draguitax.py',261),
  ('term_line -> empty','term_line',1,'p_term_line','draguitax.py',262),
  ('unaryexpre -> factor','unaryexpre',1,'p_unaryexpr','draguitax.py',268),
  ('unaryexpre -> PLUS factor','unaryexpre',2,'p_unaryexpr','draguitax.py',269),
  ('unaryexpre -> MINUS factor','unaryexpre',2,'p_unaryexpr','draguitax.py',270),
  ('factor -> INT_CONSTANT','factor',1,'p_factor','draguitax.py',276),
  ('factor -> FLOAT_CONSTANT','factor',1,'p_factor','draguitax.py',277),
  ('factor -> STRING_CONSTANT','factor',1,'p_factor','draguitax.py',278),
  ('factor -> NULL','factor',1,'p_factor','draguitax.py',279),
  ('factor -> lvalue','factor',1,'p_factor','draguitax.py',280),
  ('factor -> LPAREN numexpression RPAREN','factor',3,'p_factor','draguitax.py',281),
  ('lvalue -> IDENT lvalue_line','lvalue',2,'p_lvalue','draguitax.py',287),
  ('lvalue_line -> LBRACKET numexpression RBRACKET lvalue_line','lvalue_line',4,'p_lvalue_line','draguitax.py',293),
  ('lvalue_line -> empty','lvalue_line',1,'p_lvalue_line','draguitax.py',294),
  ('empty -> <empty>','empty',0,'p_empty','draguitax.py',300),
]
